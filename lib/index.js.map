{"version":3,"sources":["../src/index.js"],"names":["PORT","server","ApolloServer","typeDefs","resolvers","context","req","connection","db","prisma","subscriptions","onConnect","connectionParams","authToken","APP_SECRET","userId","Error","user","uid","console","log","onDisconnect","webSocket","validationRules","listen","port","then","url"],"mappings":";;AAAA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,IAAI,GAAG,IAAb;AAEA,IAAMC,MAAM,GAAG,IAAIC,0BAAJ,CAAiB;AAC9BC,EAAAA,QAAQ,EAARA,gBAD8B;AAE9BC,EAAAA,SAAS,EAATA,oBAF8B;AAG9BC,EAAAA,OAAO;AAAA;AAAA;AAAA,4BAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,cAAAA,GAAR,QAAQA,GAAR,EAAYC,UAAZ,QAAYA,UAAZ;;AAAA,mBACHA,UADG;AAAA;AAAA;AAAA;;AAAA,gDAGEA,UAAU,CAACF,OAHb;;AAAA;AAAA,gDAMA;AACLC,gBAAAA,GAAG,EAAHA,GADK;AAELE,gBAAAA,EAAE,EAAEC;AAFC,eANA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;AAAA,KAHuB;AAc9BC,EAAAA,aAAa,EAAE;AACbC,IAAAA,SAAS;AAAA;AAAA;AAAA,8BAAE,kBAAOC,gBAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBACLA,gBAAgB,CAACC,SADZ;AAAA;AAAA;AAAA;;AAAA,0BAEU,0BAAOD,gBAAgB,CAACC,SAAxB,EAAmCC,iBAAnC,CAFV,EAEAC,MAFA,WAEAA,MAFA;;AAAA,oBAGFA,MAHE;AAAA;AAAA;AAAA;;AAAA,sBAIC,IAAIC,KAAJ,CAAU,SAAV,CAJD;;AAAA;AAAA;AAAA,uBAMYP,qBAAOQ,IAAP,CAAY;AAAEC,kBAAAA,GAAG,EAAEH;AAAP,iBAAZ,CANZ;;AAAA;AAMDE,gBAAAA,IANC;;AAAA,qBAOJA,IAPI;AAAA;AAAA;AAAA;;AAQLE,gBAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBH,IAAnB;AARK,kDASE;AAACA,kBAAAA,IAAI,EAAJA,IAAD;AAAMT,kBAAAA,EAAE,EAACC;AAAT,iBATF;;AAAA;AAAA,sBAYD,IAAIO,KAAJ,CAAU,OAAV,CAZC;;AAAA;AAAA,sBAcH,IAAIA,KAAJ,CAAU,qBAAV,CAdG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OADI;AAiBbK,IAAAA,YAAY,EAAE,sBAACC,SAAD,EAAYjB,OAAZ,EAAwB;AACpCc,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;AAnBY,GAde;AAmC9BG,EAAAA,eAAe,EAAE,CAAE,gCAAW,EAAX,CAAF,CAnCa,CAmCM;;AAnCN,CAAjB,CAAf;AAsCAtB,MAAM,CAACuB,MAAP,CAAc;AAAEC,EAAAA,IAAI,EAAEzB;AAAR,CAAd,EAAgC0B,IAAhC,CAAqC;AAAA,MAAGC,GAAH,SAAGA,GAAH;AAAA,SAAaR,OAAO,CAACC,GAAR,wCAAkCO,GAAlC,EAAb;AAAA,CAArC,E,CAEA","sourcesContent":["import 'babel-polyfill';\r\n\r\nimport { ApolloServer } from 'apollo-server'\r\nimport {verify} from 'jsonwebtoken';\r\nimport depthLimit from 'graphql-depth-limit'\r\n\r\nimport { APP_SECRET } from './services/utils';\r\nimport { prisma } from './generated/prisma-client'\r\nimport { resolvers } from './resolvers'\r\nimport { typeDefs } from './schema'\r\n\r\nconst PORT = 4000;\r\n\r\nconst server = new ApolloServer({\r\n  typeDefs,\r\n  resolvers,\r\n  context: async ({req,connection}) => {\r\n    if (connection) {\r\n      // check connection for metadata\r\n      return connection.context;\r\n    }\r\n\r\n    return {\r\n      req,\r\n      db: prisma,\r\n    }\r\n  },\r\n  subscriptions: {\r\n    onConnect: async (connectionParams) => {\r\n      if (connectionParams.authToken) {\r\n        const {userId} = verify(connectionParams.authToken, APP_SECRET)\r\n        if (!userId) {\r\n          throw new Error(\"token错误\")\r\n        }\r\n        const user = await prisma.user({ uid: userId })\r\n        if(user){\r\n          console.log('开始订阅',user)\r\n          return {user,db:prisma}\r\n          \r\n        }\r\n        throw new Error(\"用户不存在\")\r\n      }\r\n      throw new Error('Missing auth token!');\r\n    },\r\n    onDisconnect: (webSocket, context) => {\r\n      console.log('结束订阅')\r\n    },\r\n  },\r\n  validationRules: [ depthLimit(10) ],// 最大深度查询限制。\r\n});\r\n\r\nserver.listen({ port: PORT   }).then(({ url }) => console.log(`🚀 Server ready at ${url}`));\r\n\r\n// ,host:\"192.168.0.102\" \r\n\r\n"],"file":"index.js"}