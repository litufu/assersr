{"version":3,"sources":["../src/index.js"],"names":["server","ApolloServer","typeDefs","resolvers","context","req","connection","db","prisma","subscriptions","onConnect","connectionParams","authToken","APP_SECRET","userId","Error","user","uid","onDisconnect","webSocket","console","log","validationRules","app","applyMiddleware","use","bodyParser","json","urlencoded","extended","post","res","obj","body","sign","sign_type","verRes","trade","id","out_trade_no","amount","parseFloat","total_amount","app_id","seller_id","send","updateTrade","where","data","status","listen","port","PORT","HOST","graphqlPath"],"mappings":"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","sourcesContent":["import 'babel-polyfill';\r\nimport express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport { ApolloServer } from 'apollo-server-express'\r\nimport {verify} from 'jsonwebtoken'\r\nimport depthLimit from 'graphql-depth-limit'\r\n\r\nimport { APP_SECRET,verified } from './services/utils'\r\nimport  {raw} from './services/helper'\r\nimport { prisma } from './generated/prisma-client'\r\nimport { resolvers } from './resolvers'\r\nimport { typeDefs } from './schema'\r\nimport {HOST,PORT} from './services/settings'\r\n\r\n\r\nconst server = new ApolloServer({\r\n  typeDefs,\r\n  resolvers,\r\n  context: async ({req,connection}) => {\r\n    if (connection) {\r\n      // check connection for metadata\r\n      return connection.context;\r\n    }\r\n\r\n    return {\r\n      req,\r\n      db: prisma,\r\n    }\r\n  },\r\n  subscriptions: {\r\n    onConnect: async (connectionParams) => {\r\n      if (connectionParams.authToken) {\r\n        const {userId} = verify(connectionParams.authToken, APP_SECRET)\r\n        if (!userId) {\r\n          throw new Error(\"token错误\")\r\n        }\r\n        const user = await prisma.user({ uid: userId })\r\n        if(user){\r\n          return {user,db:prisma}\r\n          \r\n        }\r\n        throw new Error(\"用户不存在\")\r\n      }\r\n      throw new Error('Missing auth token!');\r\n    },\r\n    onDisconnect: (webSocket, context) => {\r\n      console.log('结束订阅')\r\n    },\r\n  },\r\n  validationRules: [ depthLimit(10) ],// 最大深度查询限制。\r\n});\r\n\r\nconst app = express();\r\nserver.applyMiddleware({ app });\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\napp.post('/alipay/notify_url',  async (req, res)=> {\r\n  const obj = req.body\r\n  const sign = req.body.sign\r\n  delete obj.sign\r\n  delete obj.sign_type\r\n\r\n  const verRes = verified(raw(obj), sign)\r\n  if (verRes) {\r\n      \r\n      /** \r\n       * 1、商户需要验证该通知数据中的out_trade_no是否为商户系统中创建的订单号，\r\n       * 2、判断total_amount是否确实为该订单的实际金额（即商户订单创建时的金额）\r\n       * 3、校验通知中的seller_id（或者seller_email) 是否为out_trade_no这笔单据的对应的操作方（有的时候，一个商户可能有多个seller_id/seller_email）\r\n       * 4、验证app_id是否为该商户本身。上述1、2、3、4有任何一个验证不通过，则表明本次通知是异常通知，务必忽略。在上述验证通过后商户必须根据支付宝不同类型的业务通知，\r\n       * 正确的进行不同的业务处理，并且过滤重复的通知结果数据。\r\n       * 在支付宝的业务通知中，只有交易通知状态为TRADE_SUCCESS或TRADE_FINISHED时，支付宝才会认定为买家付款成功。\r\n      */\r\n      // 按照支付结果异步通知中的描述，对支付结果中的业务内容进行1\\2\\3\\4二次校验，校验成功后在response中返回success，校验失败返回failure\r\n      const trade = await prisma.trade({id:obj.out_trade_no})\r\n      if(trade){\r\n        const amount = await prisma.trade({id:obj.out_trade_no}).amount()\r\n        if(parseFloat(obj.total_amount)!==amount ||\r\n        obj.app_id !== \"2019022063305057\" ||\r\n        obj.seller_id !==\"2088431374041067\"  // 账户PID\r\n        ){\r\n          res.send('failure') \r\n        }else{\r\n          await prisma.updateTrade({\r\n            where:{id:obj.out_trade_no},\r\n            data:{status:\"1\"}\r\n          })\r\n          res.send('success')\r\n        }\r\n      }\r\n  } else {\r\n      res.send('failure')\r\n  }\r\n})\r\n\r\n// server.listen({ port: PORT ,host:\"192.168.43.75\"   }).then(({ url }) => console.log(`🚀 Server ready at ${url}`));\r\napp.listen({ port: PORT }, () =>\r\n  console.log(`🚀 Server ready at http://${HOST}:${PORT}${server.graphqlPath}`)\r\n);\r\n// ,host:\"192.168.0.102\" \r\n\r\n"],"file":"index.js"}