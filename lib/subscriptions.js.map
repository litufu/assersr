{"version":3,"sources":["../src/subscriptions.js"],"names":["options","host","REDISHOST","port","password","REDISPWD","retry_strategy","Math","max","attempt","pubsub","RedisPubSub","publisher","Redis","subscriber","asyncAuthIterator","messages","authPromise","asyncIterator","next","then","return","throw","error","$$asyncIterator"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;AAEA,IAAMA,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAEC,mBADQ;AAEdC,EAAAA,IAAI,EAAE,MAFQ;AAGdC,EAAAA,QAAQ,EAACC,kBAHK;AAIdC,EAAAA,cAAc,EAAE,wBAAAN,OAAO,EAAK;AAC1B;AACA,WAAOO,IAAI,CAACC,GAAL,CAASR,OAAO,CAACS,OAAR,GAAkB,GAA3B,EAAgC,IAAhC,CAAP;AACD;AAPa,CAAhB;AAWO,IAAMC,MAAM,GAAG,IAAIC,sCAAJ,CAAgB;AACpCC,EAAAA,SAAS,EAAE,IAAIC,gBAAJ,CAAUb,OAAV,CADyB;AAEpCc,EAAAA,UAAU,EAAE,IAAID,gBAAJ,CAAUb,OAAV;AAFwB,CAAhB,CAAf;;;AAKPU,MAAM,CAACK,iBAAP,GAA2B,UAACC,QAAD,EAAWC,WAAX,EAA2B;AAClD,MAAMC,aAAa,GAAGR,MAAM,CAACQ,aAAP,CAAqBF,QAArB,CAAtB;AACA;AACEG,IAAAA,IADF,kBACS;AACL,aAAOF,WAAW,CAACG,IAAZ,CAAiB;AAAA,eAAMF,aAAa,CAACC,IAAd,EAAN;AAAA,OAAjB,CAAP;AACD,KAHH;AAIEE,IAAAA,MAJF,qBAIW;AACP,aAAOJ,WAAW,CAACG,IAAZ,CAAiB;AAAA,eAAMF,aAAa,CAACG,MAAd,EAAN;AAAA,OAAjB,CAAP;AACD,KANH;AAOEC,IAAAA,KAPF,kBAOQC,KAPR,EAOe;AACX,aAAOL,aAAa,CAACI,KAAd,CAAoBC,KAApB,CAAP;AACD;AATH,KAUGC,wBAVH,cAUsB;AAClB,WAAON,aAAP;AACD,GAZH;AAcD,CAhBH;;eAmBeR,M","sourcesContent":["import { RedisPubSub } from 'graphql-redis-subscriptions';\r\nimport Redis from 'ioredis';\r\nimport { $$asyncIterator } from 'iterall';\r\n\r\nimport {REDISHOST,REDISPWD} from './services/settings'\r\n\r\nconst options = {\r\n  host: REDISHOST,\r\n  port: '6379',\r\n  password:REDISPWD,\r\n  retry_strategy: options  => {\r\n    // reconnect after\r\n    return Math.max(options.attempt * 100, 3000);\r\n  }\r\n};\r\n\r\n\r\nexport const pubsub = new RedisPubSub({\r\n  publisher: new Redis(options),\r\n  subscriber: new Redis(options)\r\n});\r\n\r\npubsub.asyncAuthIterator = (messages, authPromise) => {\r\n    const asyncIterator = pubsub.asyncIterator(messages);\r\n    return {\r\n      next() {\r\n        return authPromise.then(() => asyncIterator.next());\r\n      },\r\n      return() {\r\n        return authPromise.then(() => asyncIterator.return());\r\n      },\r\n      throw(error) {\r\n        return asyncIterator.throw(error);\r\n      },\r\n      [$$asyncIterator]() {\r\n        return asyncIterator;\r\n      },\r\n    };\r\n  };\r\n  \r\n\r\nexport default pubsub;"],"file":"subscriptions.js"}