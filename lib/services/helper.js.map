{"version":3,"sources":["../../src/services/helper.js"],"names":["parser","xml2js","Parser","raw","args","signStr","Object","keys","sort","map","key","data","Array","prototype","toString","call","JSON","stringify","iconv","encode","join","createNonceStr","Math","random","substr","createTimeStamp","parseInt","Date","getTime","getXMLNodeValue","xml","Promise","resolve","reject","parseString","err","result"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEO,IAAMA,MAAM,GAAG,IAAIC,gBAAOC,MAAX,EAAf;;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,IAAD,EAAQ;AACvB,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,IAAlB,GAAyBC,GAAzB,CAA6B,UAACC,GAAD,EAAS;AAClD,QAAIC,IAAI,GAAGP,IAAI,CAACM,GAAD,CAAf;;AACA,QAAIE,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyBC,IAAzB,CAA8BJ,IAA9B,MAAwC,iBAA5C,EAA+D;AAC7DA,MAAAA,IAAI,GAAGK,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAP;AACD;;AACD,qBAAUD,GAAV,cAAiBQ,KAAK,CAACC,MAAN,CAAaR,IAAb,EAAmB,OAAnB,CAAjB;AACD,GANa,EAMXS,IANW,CAMN,GANM,CAAhB;AAQA,SAAOf,OAAP;AACH,CAVM;;;;AAYA,IAAMgB,cAAc,GAAG,SAAjBA,cAAiB,GAAK;AAC/B,SAAOC,IAAI,CAACC,MAAL,GAAcT,QAAd,CAAuB,EAAvB,EAA2BU,MAA3B,CAAkC,CAAlC,EAAqC,EAArC,CAAP;AACH,CAFM;;;;AAIA,IAAMC,eAAe,GAAC,SAAhBA,eAAgB,GAAI;AAC7B,mBAAUC,QAAQ,CAAC,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAxB,EAA6B,EAA7B,CAAlB;AACH,CAFM;;;;AAIA,IAAMC,eAAe,GAAC,SAAhBA,eAAgB,CAACC,GAAD,EAAO;AAChC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCjC,IAAAA,MAAM,CAACkC,WAAP,CAAmBJ,GAAnB,EAAyB,UAACK,GAAD,EAAMC,MAAN,EAAgB;AACrC,UAAID,GAAJ,EAAS;AACLF,QAAAA,MAAM,CAAC,KAAD,CAAN;AACH,OAFD,MAEO;AACHD,QAAAA,OAAO,CAACI,MAAM,CAACN,GAAR,CAAP;AACH;AACJ,KAND;AAOH,GARM,CAAP;AAUH,CAXM","sourcesContent":["import xml2js from 'xml2js';\r\nimport * as iconv from 'iconv-lite';\r\n\r\nexport const parser = new xml2js.Parser()\r\n\r\nexport const raw = (args)=>{\r\n    const signStr = Object.keys(args).sort().map((key) => {\r\n        let data = args[key];\r\n        if (Array.prototype.toString.call(data) !== '[object String]') {\r\n          data = JSON.stringify(data);\r\n        }\r\n        return `${key}=${iconv.encode(data, 'utf-8')}`;\r\n      }).join('&');\r\n\r\n    return signStr;\r\n}\r\n\r\nexport const createNonceStr = ()=> {\r\n    return Math.random().toString(36).substr(2, 15);\r\n}\r\n\r\nexport const createTimeStamp=()=>{\r\n    return `${parseInt(new Date().getTime() / 1000,10)}`\r\n}\r\n\r\nexport const getXMLNodeValue=(xml)=>{\r\n    return new Promise((resolve, reject) => {\r\n        parser.parseString(xml,  (err, result)=> {\r\n            if (err) {\r\n                reject('err')\r\n            } else {\r\n                resolve(result.xml)\r\n            }\r\n        })\r\n    })\r\n\r\n}\r\n"],"file":"helper.js"}