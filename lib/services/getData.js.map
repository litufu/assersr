{"version":3,"sources":["../../src/services/getData.js"],"names":["provinceFile","cityFile","areaFile","streetFile","villageFile","majorFile","universityFile","stationFile","readFile","fileName","encode","Promise","resolve","reject","fs","error","data","parseCsv","Papa","parse","complete","results","addStation","file","value","prisma","createStation","code","name","newStation","console","log","addUniversity","createUniversity","education","department","location","desc","newUniversity","addMajor","createMajor","category","newMajor","addProvince","createProvince","newProvince","addCity","createCity","province","connect","newCity","addArea","createArea","city","newArea","addStreet","createStreet","Area","newStreet","addVillage","createVillage","street","newVillage"],"mappings":"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","sourcesContent":["\"use strict\";\r\nimport Papa from 'papaparse'\r\nimport  fs from 'fs'\r\nimport readline from \"readline\"\r\nimport stream from 'stream'\r\n\r\nimport { prisma } from '../generated/prisma-client'\r\n\r\nconst provinceFile = '../data/province.csv'\r\nconst cityFile = '../data/city.csv'\r\nconst areaFile = '../data/area.csv'\r\nconst streetFile = '../data/street.csv'\r\nconst villageFile = '../data/village.csv'\r\nconst majorFile = '../data/major.csv'\r\nconst universityFile = '../data/university.csv'\r\nconst stationFile = '../data/station.csv'\r\n\r\n\r\n\r\nconst readFile = function (fileName,encode) {\r\n  return new Promise(function (resolve, reject) {\r\n    fs.readFile(fileName,encode, function(error, data) {\r\n      if (error) return reject(error);\r\n      resolve(data);\r\n    });\r\n  });\r\n};\r\n\r\nconst parseCsv = function (data) {\r\n  return new Promise(function (resolve, reject) {\r\n    Papa.parse(data, {complete:function(results) {\r\n      resolve(results);\r\n    }});\r\n  });\r\n};\r\n\r\n// 添加职位信息\r\n\r\nasync function addStation(){\r\n  try {\r\n    const file = await readFile(stationFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for(const value of results.data) {\r\n      try{\r\n      const newStation = await prisma\r\n        .createStation({\r\n          code: value[0],\r\n          name:value[1],\r\n        })\r\n      console.log(newStation);\r\n    }catch(err){\r\n      console.log(err)\r\n      continue\r\n    }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n// 添加大学信息\r\nasync function addUniversity(){\r\n  try {\r\n    const file = await readFile(universityFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for(let value of results.data) {\r\n      try{\r\n      const newUniversity = await prisma\r\n        .createUniversity({\r\n          name: value[0],\r\n          education:value[1],\r\n          department:value[2],\r\n          location:value[3],\r\n          desc:value[4],\r\n        })\r\n      console.log(newUniversity);\r\n    }catch(err){\r\n      console.log(err)\r\n      continue\r\n    }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n// 添加专业信息\r\nasync function addMajor(){\r\n  try {\r\n    const file = await readFile(majorFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for(let value of results.data) {\r\n      try{\r\n      const newMajor = await prisma\r\n        .createMajor({\r\n          name: value[1],\r\n          category: value[0],\r\n          education:value[2]\r\n        })\r\n      console.log(newMajor);\r\n    }catch(err){\r\n      console.log(err)\r\n      continue\r\n    }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n// 添加省份信息\r\nasync function addProvince() {\r\n  try {\r\n    const file = await readFile(provinceFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for(let value of results.data) {\r\n      try{\r\n      const newProvince = await prisma\r\n        .createProvince({\r\n          code: value[0],\r\n          name: value[1],\r\n        })\r\n      console.log(newProvince);\r\n    }catch(err){\r\n      console.log(err)\r\n      continue\r\n    }\r\n    }\r\n\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// 添加市一级信息\r\nasync function addCity() {\r\n  try {\r\n    const file = await readFile(cityFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for(let value of results.data) {\r\n      try{\r\n        const newCity = await prisma\r\n          .createCity({\r\n            code: value[0],\r\n            name: value[1],\r\n            province:{connect:{code:value[2]}}\r\n          })\r\n        console.log(newCity);\r\n      }catch(err){\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// 添加区一级信息\r\nasync function addArea() {\r\n  try {\r\n    const file = await readFile(areaFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for(let value of results.data) {\r\n      try{\r\n        const newArea = await prisma\r\n          .createArea({\r\n            code: value[0],\r\n            name: value[1],\r\n            city:{connect:{code:value[2]}}\r\n          })\r\n        console.log(newArea);\r\n      }catch(err){\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// 添加区一级信息\r\nasync function addStreet() {\r\n  try {\r\n    const file = await readFile(streetFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for(let value of results.data) {\r\n      console.log( value[0])\r\n      console.log( value[1])\r\n      console.log( value[2])\r\n      try{\r\n        const newStreet = await prisma\r\n          .createStreet({\r\n            code: value[0],\r\n            name: value[1],\r\n            Area:{connect:{code:value[2]}}\r\n          })\r\n        console.log(newStreet);\r\n      }catch(err){\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// 添加村一级信息\r\nasync function addVillage() {\r\n  try {\r\n    const file = await readFile(villageFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for(let value of results.data) {\r\n      try{\r\n        const newVillage = await prisma\r\n          .createVillage({\r\n            code: value[0],\r\n            name: value[1],\r\n            street:{connect:{code:value[2]}}\r\n          })\r\n        console.log(newVillage);\r\n      }catch(err){\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n\r\n// addProvince()\r\n// addCity()\r\n// addArea()\r\n// addStreet()\r\naddVillage()\r\n// addMajor()\r\n// addUniversity()\r\n// addStation()"],"file":"getData.js"}