{"version":3,"sources":["../../src/services/getData.js"],"names":["provinceFile","cityFile","areaFile","streetFile","villageFile","majorFile","universityFile","stationFile","readFile","fileName","encode","Promise","resolve","reject","fs","error","data","parseCsv","Papa","parse","complete","results","addStation","file","value","prisma","createStation","code","name","newStation","console","log","addUniversity","createUniversity","education","department","location","desc","newUniversity","addMajor","createMajor","category","newMajor","addProvince","createProvince","newProvince","addCity","createCity","province","connect","newCity","addArea","createArea","city","newArea","addStreet","createStreet","Area","newStreet","addVillage","createVillage","street","newVillage","addProducts","products","subject","info","kind","product","createProduct","newProduct"],"mappings":"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","sourcesContent":["\"use strict\";\r\nimport Papa from 'papaparse'\r\nimport fs from 'fs'\r\nimport readline from \"readline\"\r\nimport stream from 'stream'\r\n\r\nimport { prisma } from '../generated/prisma-client'\r\n\r\nconst provinceFile = '../data/province.csv'\r\nconst cityFile = '../data/city.csv'\r\nconst areaFile = '../data/area.csv'\r\nconst streetFile = '../data/street.csv'\r\nconst villageFile = '../data/village.csv'\r\nconst majorFile = '../data/major.csv'\r\nconst universityFile = '../data/university.csv'\r\nconst stationFile = '../data/station.csv'\r\n\r\n\r\n\r\nconst readFile = function (fileName, encode) {\r\n  return new Promise(function (resolve, reject) {\r\n    fs.readFile(fileName, encode, function (error, data) {\r\n      if (error) return reject(error);\r\n      resolve(data);\r\n    });\r\n  });\r\n};\r\n\r\nconst parseCsv = function (data) {\r\n  return new Promise(function (resolve, reject) {\r\n    Papa.parse(data, {\r\n      complete: function (results) {\r\n        resolve(results);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// 添加职位信息\r\n\r\nasync function addStation() {\r\n  try {\r\n    const file = await readFile(stationFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for (const value of results.data) {\r\n      try {\r\n        const newStation = await prisma\r\n          .createStation({\r\n            code: value[0],\r\n            name: value[1],\r\n          })\r\n        console.log(newStation);\r\n      } catch (err) {\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n// 添加大学信息\r\nasync function addUniversity() {\r\n  try {\r\n    const file = await readFile(universityFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for (let value of results.data) {\r\n      try {\r\n        const newUniversity = await prisma\r\n          .createUniversity({\r\n            name: value[0],\r\n            education: value[1],\r\n            department: value[2],\r\n            location: value[3],\r\n            desc: value[4],\r\n          })\r\n        console.log(newUniversity);\r\n      } catch (err) {\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n// 添加专业信息\r\nasync function addMajor() {\r\n  try {\r\n    const file = await readFile(majorFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for (let value of results.data) {\r\n      try {\r\n        const newMajor = await prisma\r\n          .createMajor({\r\n            name: value[1],\r\n            category: value[0],\r\n            education: value[2]\r\n          })\r\n        console.log(newMajor);\r\n      } catch (err) {\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n// 添加省份信息\r\nasync function addProvince() {\r\n  try {\r\n    const file = await readFile(provinceFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for (let value of results.data) {\r\n      try {\r\n        const newProvince = await prisma\r\n          .createProvince({\r\n            code: value[0],\r\n            name: value[1],\r\n          })\r\n        console.log(newProvince);\r\n      } catch (err) {\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// 添加市一级信息\r\nasync function addCity() {\r\n  try {\r\n    const file = await readFile(cityFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for (let value of results.data) {\r\n      try {\r\n        const newCity = await prisma\r\n          .createCity({\r\n            code: value[0],\r\n            name: value[1],\r\n            province: { connect: { code: value[2] } }\r\n          })\r\n        console.log(newCity);\r\n      } catch (err) {\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// 添加区一级信息\r\nasync function addArea() {\r\n  try {\r\n    const file = await readFile(areaFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for (let value of results.data) {\r\n      try {\r\n        const newArea = await prisma\r\n          .createArea({\r\n            code: value[0],\r\n            name: value[1],\r\n            city: { connect: { code: value[2] } }\r\n          })\r\n        console.log(newArea);\r\n      } catch (err) {\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// 添加区一级信息\r\nasync function addStreet() {\r\n  try {\r\n    const file = await readFile(streetFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for (let value of results.data) {\r\n      console.log(value[0])\r\n      console.log(value[1])\r\n      console.log(value[2])\r\n      try {\r\n        const newStreet = await prisma\r\n          .createStreet({\r\n            code: value[0],\r\n            name: value[1],\r\n            Area: { connect: { code: value[2] } }\r\n          })\r\n        console.log(newStreet);\r\n      } catch (err) {\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// 添加村一级信息\r\nasync function addVillage() {\r\n  try {\r\n    const file = await readFile(villageFile, 'utf8')\r\n    const results = await parseCsv(file)\r\n    for (let value of results.data) {\r\n      try {\r\n        const newVillage = await prisma\r\n          .createVillage({\r\n            code: value[0],\r\n            name: value[1],\r\n            street: { connect: { code: value[2] } }\r\n          })\r\n        console.log(newVillage);\r\n      } catch (err) {\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nasync function addProducts() {\r\n  try {\r\n    const products = [{\r\n      subject: \"2019年高考志愿填报会员\",\r\n      info: \"有效期至2019年9月1日\",\r\n      kind: \"REGSTATUS\",\r\n    },\r\n    {\r\n      subject: \"线下相亲会员\",\r\n      info: \"购买日一年内有效\",\r\n      kind: \"LOVE\",\r\n    },\r\n    {\r\n      subject: \"寻找创业合伙人会员\",\r\n      info: \"购买日一年内有效\",\r\n      kind: \"PARTNER\",\r\n    },\r\n    ]\r\n    for (const product of products) {\r\n      try {\r\n        const newProduct = await prisma\r\n          .createProduct({\r\n            subject: product.subject,\r\n            info: product.info,\r\n            kind: product.kind\r\n          })\r\n        console.log(newProduct);\r\n      } catch (err) {\r\n        console.log(err)\r\n        continue\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// addProvince()\r\n// addCity()\r\n// addArea()\r\n// addStreet()\r\naddVillage()\r\n// addMajor()\r\n// addUniversity()\r\n// addStation()\r\n// addProducts()"],"file":"getData.js"}