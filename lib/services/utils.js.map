{"version":3,"sources":["../../src/services/utils.js"],"names":["FAMILYGROUP_CHANGED","APP_SECRET","getUserId","context","Authorization","req","headers","authorization","token","replace","verifiedToken","userId","getUser","prisma","user","uid","checkeCtxUserExist","ctx","db","getCommonFamilies","relationship","families","id","commonFamilies","filter","family","relationIntersection","f","indexOf","gender","relationshipTOGender","hasManySpouses","length","spouse","fatherOrMother","commonFamilies2","commonFamily","push","isFatherorMother","getIntersectionFamiles","myFamilies","relativeFamiles","myIntersectionFamilies","relativeIntersectionFamilies","myFamily","relativeFamily","to","myFamilyTo","relativeFamilyTo","name","getDifferentFamilies","myCommonFamilies","differentFamilies","myCommonFamiliesIds","map","mycommonFamily","updateCommonUserFamily","me","myRelationship","myCommonFamily","relative","relativeRelationship","persons","where","relativePerson","commonUser","commonUserToRelativeFamily","updateFamily","data","status","statusMap","connect","isNotYourself","computeRelationship","relationshipGenderMap","relationIntersectionNew","Date","parse","birthday","isSonOrDaughter","commonUserToMeFamily","createFamily","from","pubsub","publish","getAllFamilies","SON_DAUGHTER","BROTHER_SISTER","SPOUSE_SON_DAUGHTER","concat","myBSFamilies","myBSFamily","BS","BSFamilies","SSDOfBS","SDFamiliesOfBS","SDFamilyOfBS","SDOfBS","familiesOfSDOfBS","SSDOfSDOfBS","SDfamiliesOfSDOfBS","SDfamilyOfSDOfBS","SDOfSDOfBS","familiesOfSDOfSDOfBS","SSDfamiliesOfSDOfSDOfBS","SDFamiliesOfM","SDFamilyOfMe","SDOfMe","familiesOfSDOfMe","SSDOfSDOfMe","SDfamiliesOfSDOfMe","SDfamilyOfSDOfMe","SDOfSDOfMe","familiesOfSDOfSDOfMe","SSDfamiliesOfSDOfSDOfMe","checkExistFatherAndMother","father","mother","createFamilyGroupById","fatherPerson","motherPerson","MBS","MBSids","mbs","myParentsGroupFamilies","myParentsGroupFamiliesIds","familyGroups","OR","mbsId","users_some","mbsFamilyGroups","createFamilyGroup","creater","users","familyGroup","existFamilyGroupFamilies","exsitFamilyGroupFamilyIds","updateFamilyGroup","disconnect","hasFatherAndMotherFamilyGroup","mbsFamilyGroup","fatherUser","motherUser","nothasFatherAndMotherFaimlyGroupIds","fg","deleteManyFamilyGroups","count","hasFatherOrMotherFamilyGroup","nothasFatherOrMotherFaimlyGroupIds","otherFaimlyGroupIds","pubGroupFamily","groupFamilies","refreshMyFamilyGroups","parent","args","Error","groupUsersId","meAndSpousesfamilies","meFamilies","mySpouseFamilies","mySpouseFamily","mySpouse","spouseFamilies","p","fp","ffp","fmp","mp","mfp","mmp","mpast","fpast","console","log","familyFather","fatherFamilies","fatherFamilyFather","grandpa","motherFamilyFather","grandma","message","familyMother","motherFamilies","fatherFamilyMother","motherFamilyMother","sonAndDaughters","sonAndDaughter","sd","usersId","getFileTypeByExt","ext","imgExt","videoExt","i","type","toUpperCase","getFileExt","filepath","pos","getFileName","timestamp","getTime","randNum","Math","floor","random","fileName","_getNowFormatDate","date","seperator1","year","getFullYear","month","getMonth","strDate","getDate","currentdate","module","exports"],"mappings":"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","sourcesContent":["import { verify } from 'jsonwebtoken'\r\nimport { statusMap } from \"../services/statusMap\"\r\nimport { \r\n  relationIntersection,\r\n  relationIntersectionNew,\r\n  relationshipGenderMap ,\r\n  relationshipTOGender,\r\n} from \"../services/relationship\"\r\nimport { pubsub } from '../subscriptions';\r\n\r\nconst FAMILYGROUP_CHANGED = 'familyGroupChanged'\r\nconst APP_SECRET = 'appsecret321'\r\n\r\nfunction getUserId(context) {\r\n  const Authorization = (context.req.headers && context.req.headers.authorization) || '';\r\n  if (Authorization) {\r\n    const token = Authorization.replace('Bearer ', '')\r\n    const verifiedToken = verify(token, APP_SECRET)\r\n    return verifiedToken && verifiedToken.userId\r\n  }\r\n}\r\n\r\nasync function getUser(req, prisma) {\r\n  const Authorization = (req.headers && req.headers.authorization) || '';\r\n  if (Authorization) {\r\n    const token = Authorization.replace('Bearer ', '')\r\n    const verifiedToken = verify(token, APP_SECRET)\r\n    const userId = verifiedToken.userId\r\n    const user = await prisma.user({ uid:userId })\r\n    return user\r\n  }\r\n  return null\r\n}\r\n\r\n\r\nconst checkeCtxUserExist = async (ctx)=>{\r\n  const userId = getUserId(ctx)\r\n    if (!userId) {\r\n      return false\r\n    }\r\n  const user = await ctx.db.user({ uid: userId })\r\n  if (!user) {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\n\r\nconst getCommonFamilies = async (relationship, families,id,ctx) => {\r\n  // 判断自己的家人中那些是共同的家人，如父亲与我共同的家人是（母亲、兄弟姐妹）\r\n  // id代表被判断的那个人。即父亲的id\r\n  // 如果父亲有两任妻子，或母亲有两任丈夫，则需要判断哪个才是父亲、母亲和亲身兄弟姐妹。\r\n  const commonFamilies =  families.filter(\r\n    family => (family.relationship in relationIntersection[relationship])\r\n  ).filter(\r\n    f=>f.id!==id\r\n  )\r\n\r\n  if(~['father','mother'].indexOf(relationship)){\r\n    const gender = relationshipTOGender[relationship]\r\n    let hasManySpouses\r\n    if(gender===\"female\"){\r\n      hasManySpouses = families.filter(family=>family.relationship==='husband').length>1\r\n    }else{\r\n      hasManySpouses = families.filter(family=>family.relationship==='wife').length>1\r\n    }\r\n    const fatherOrMother = await ctx.db.family({id}).spouse()\r\n    if(hasManySpouses){\r\n        const commonFamilies2 = []\r\n        for(const commonFamily of commonFamilies){\r\n          const spouse = await ctx.db.family({id:commonFamily.id}).spouse()\r\n          if(spouse){\r\n            // 兄弟姐妹\r\n            if(spouse.id === fatherOrMother.id){\r\n              commonFamilies2.push(commonFamily)\r\n            }\r\n          }else{\r\n            // 父母\r\n            const isFatherorMother = commonFamily.id === fatherOrMother.id\r\n            if(isFatherorMother){\r\n              commonFamilies2.push(commonFamily)\r\n            }\r\n          }\r\n        }\r\n      return  commonFamilies2\r\n    }\r\n  }\r\n  return commonFamilies\r\n}\r\n\r\nconst getIntersectionFamiles= async (myFamilies,relativeFamiles,ctx)=>{\r\n  const myIntersectionFamilies = []\r\n  const relativeIntersectionFamilies = []\r\n  for(const myFamily of myFamilies){\r\n    for(const relativeFamily of relativeFamiles){\r\n      const myFamilyTo = await ctx.db.family({id:myFamily.id}).to()\r\n      const relativeFamilyTo = await ctx.db.family({id:relativeFamily.id}).to()\r\n      if(myFamilyTo.name===relativeFamilyTo.name){\r\n        myIntersectionFamilies.push(myFamily)\r\n        relativeIntersectionFamilies.push(relativeFamily)\r\n      }\r\n    }\r\n  }\r\n  return {myIntersectionFamilies,relativeIntersectionFamilies}\r\n}\r\n\r\nconst getDifferentFamilies = (myFamilies,myCommonFamilies)=>{\r\n  let differentFamilies = []\r\n  if(myCommonFamilies.length===0){\r\n    differentFamilies = [...myFamilies]\r\n    return differentFamilies\r\n  }\r\n\r\n  const myCommonFamiliesIds = myCommonFamilies.map(mycommonFamily=>mycommonFamily.id)\r\n  \r\n\r\n  for (const myFamily of myFamilies){\r\n    if(!~myCommonFamiliesIds.indexOf(myFamily.id)){\r\n      differentFamilies.push(myFamily)\r\n    }\r\n   \r\n  }\r\n  return differentFamilies\r\n}\r\n\r\nconst updateCommonUserFamily = async (me,myRelationship,myCommonFamily, relative,relativeRelationship, ctx) => {\r\n  const relativePerson = await ctx.db\r\n  .persons({\r\n    where: {\r\n      user:{id: relative.id}\r\n    }\r\n  })\r\n\r\n  const commonUser = await ctx.db.family({ id: myCommonFamily.id }).to().user()\r\n  const commonUserToRelativeFamily = await ctx.db.user({ id: commonUser.id }).families(\r\n    { where: { to: { name: relative.name } } }\r\n  )\r\n  // 判断共同家庭成员中是否已经存在relative\r\n  if (commonUserToRelativeFamily.length > 0) {\r\n    // 存在则修改\r\n    await ctx.db.updateFamily({\r\n      where: { id: commonUserToRelativeFamily[0].id },\r\n      data: {\r\n        status: statusMap[myCommonFamily.status],\r\n        to: { connect: { id: relativePerson[0].id } },\r\n      }\r\n    })\r\n  } else {\r\n    // 如果是自己的话不要增加。\r\n    const isNotYourself = relativePerson[0].name!==commonUser.name\r\n    if(isNotYourself){\r\n      // 不存在则增加,如果relative增加的是父亲或母亲的话，commonUser在增加子女时需要计算配偶是谁\r\n      let computeRelationship = relationshipGenderMap[relative.gender][relationIntersectionNew[relativeRelationship][myCommonFamily.relationship]]\r\n      if(computeRelationship===\"sister\"){\r\n        if(Date.parse(relative.birthday)>Date.parse(commonUser.birthday)){\r\n          computeRelationship=\"youngsister\"\r\n        }else{\r\n          computeRelationship=\"oldsister\"\r\n        }\r\n      }else if(computeRelationship===\"brother\"){\r\n        if(Date.parse(relative.birthday)>Date.parse(commonUser.birthday)){\r\n          computeRelationship=\"youngbrother\"\r\n        }else{\r\n          computeRelationship=\"oldbrother\"\r\n        }\r\n      }\r\n      const isSonOrDaughter = ~[\"son\", \"daughter\"].indexOf(computeRelationship)\r\n      if(isSonOrDaughter){\r\n        // 计算出配偶是谁\r\n      // 如果我与commonUser的关系是父母与子女的关系，则commonUser中已经包含了配偶，该配偶同时也是relative的对应的\r\n      // 如果我与commonUser的关系是夫妻关系，则我就是commonUser的配偶\r\n        const commonUserToMeFamily = await ctx.db.user({ id: commonUser.id }).families(\r\n          { where: { to: { name: me.name } } }\r\n        )\r\n        if (~[\"wife\", \"husband\"].indexOf(myCommonFamily.relationship) ) {\r\n          await ctx.db.createFamily({\r\n            from: { connect: { id: commonUser.id } },\r\n            to: { connect: { id: relativePerson[0].id } },\r\n            status: statusMap[myCommonFamily.status],\r\n            spouse: { connect: { id: commonUserToMeFamily[0].id } },\r\n            relationship:computeRelationship\r\n          })\r\n        } else {\r\n          const spouse = await ctx.db.family({ id: commonUserToMeFamily[0].id }).spouse()\r\n          await ctx.db.createFamily({\r\n            from: { connect: { id: commonUser.id } },\r\n            to: { connect: { id: relativePerson[0].id } },\r\n            status: statusMap[myCommonFamily.status],\r\n            spouse: { connect: { id: spouse.id } },\r\n            relationship:computeRelationship\r\n          })\r\n        }\r\n      }else{\r\n          // 无需计算配偶\r\n          await ctx.db.createFamily({\r\n          from: { connect: { id: commonUser.id } },\r\n          to: { connect: { id: relativePerson[0].id } },\r\n          status: statusMap[myCommonFamily.status],\r\n          relationship:computeRelationship\r\n        })\r\n      }\r\n    }\r\n  }\r\n  // 向commonuser推送familychanged\r\n  pubsub.publish('familyChanged',{\"familyChanged\":{\"text\":commonUser.id}})\r\n}\r\n\r\nconst getAllFamilies= async (myFamilies,ctx)=>{\r\n  // 获取父母-自己-儿子-孙子-重孙所有的families\r\n  // 流程\r\n  // 获取层数5：父母-自己-儿子-孙子-重孙\r\n  // 1、获取自己所有的families,自己所有的families都在父母群中。自己层完毕\r\n  // 2、获取兄弟姐妹的配偶和子女，将兄弟姐妹的配偶和子女加到父母群中。儿子层完毕\r\n  // 3、获取自己和兄弟姐妹的子女的配偶和子女，将自己和兄弟姐妹的子女的配偶和子女加到父母群中。孙子层完毕。\r\n  // 4、获取自己和兄弟姐妹的子女的子女的配偶和子女，将自己和兄弟姐妹的子女的子女的配偶和子女加到父母群中。重孙层完毕。\r\n \r\n  let families = []\r\n  const SON_DAUGHTER = ['son','daughter']\r\n  const BROTHER_SISTER = ['oldbrother','youngsister','youngbrother','oldsister']\r\n  const SPOUSE_SON_DAUGHTER = ['son','daughter','wife','husband']\r\n  // BS:兄弟姐妹，SSD:配偶和子女，SD:子女,M:我,MBS:我和兄弟姐妹\r\n  // 1、自己层\r\n  families  = families.concat(myFamilies)\r\n  // 2、儿子层\r\n  const myBSFamilies = myFamilies.filter(family=>!!~BROTHER_SISTER.indexOf(family.relationship))\r\n  for (const myBSFamily of myBSFamilies){\r\n    const BS = await ctx.db.family({id:myBSFamily.id}).to().user()\r\n    if(BS){\r\n      const BSFamilies = await ctx.db.user({id:BS.id}).families()\r\n      const SSDOfBS = BSFamilies.filter(family=>!!~SPOUSE_SON_DAUGHTER.indexOf(family.relationship))\r\n      families  = families.concat(SSDOfBS)\r\n      // 3、孙子层\r\n      const SDFamiliesOfBS = BSFamilies.filter(family=>!!~SON_DAUGHTER.indexOf(family.relationship))\r\n      for (const SDFamilyOfBS of SDFamiliesOfBS){\r\n        const SDOfBS = await ctx.db.family({id:SDFamilyOfBS.id}).to().user()\r\n        if(SDOfBS){\r\n          const familiesOfSDOfBS = await ctx.db.user({id:SDOfBS.id}).families()\r\n          const SSDOfSDOfBS = familiesOfSDOfBS.filter(family=>!!~SPOUSE_SON_DAUGHTER.indexOf(family.relationship))\r\n          families  = families.concat(SSDOfSDOfBS)\r\n          // 4、重孙层\r\n          const SDfamiliesOfSDOfBS = familiesOfSDOfBS.filter(family=>!!~SON_DAUGHTER.indexOf(family.relationship))\r\n          for (const SDfamilyOfSDOfBS of SDfamiliesOfSDOfBS){\r\n            const SDOfSDOfBS = await ctx.db.family({id:SDfamilyOfSDOfBS.id}).to().user()\r\n            if(SDOfSDOfBS){\r\n              const familiesOfSDOfSDOfBS = await ctx.db.user({id:SDOfSDOfBS.id}).families()\r\n              const SSDfamiliesOfSDOfSDOfBS = familiesOfSDOfSDOfBS.filter(family=>!!~SPOUSE_SON_DAUGHTER.indexOf(family.relationship))\r\n              families  = families.concat(SSDfamiliesOfSDOfSDOfBS)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n   // 3、孙子层\r\n   const SDFamiliesOfM = myFamilies.filter(family=>!!~SON_DAUGHTER.indexOf(family.relationship))\r\n   for (const SDFamilyOfMe of SDFamiliesOfM){\r\n     const SDOfMe = await ctx.db.family({id:SDFamilyOfMe.id}).to().user()\r\n     if(SDOfMe){\r\n       const familiesOfSDOfMe = await ctx.db.user({id:SDOfMe.id}).families()\r\n       const SSDOfSDOfMe = familiesOfSDOfMe.filter(family=>!!~SPOUSE_SON_DAUGHTER.indexOf(family.relationship))\r\n       families  = families.concat(SSDOfSDOfMe)\r\n       // 4、重孙层\r\n       const SDfamiliesOfSDOfMe = familiesOfSDOfMe.filter(family=>!!~SON_DAUGHTER.indexOf(family.relationship))\r\n       for (const SDfamilyOfSDOfMe of SDfamiliesOfSDOfMe){\r\n         const SDOfSDOfMe = await ctx.db.family({id:SDfamilyOfSDOfMe.id}).to().user()\r\n         if(SDOfSDOfMe){\r\n           const familiesOfSDOfSDOfMe = await ctx.db.user({id:SDOfSDOfMe.id}).families()\r\n           const SSDfamiliesOfSDOfSDOfMe = familiesOfSDOfSDOfMe.filter(family=>!!~SPOUSE_SON_DAUGHTER.indexOf(family.relationship))\r\n           families  = families.concat(SSDfamiliesOfSDOfSDOfMe)\r\n         }\r\n       }\r\n     }\r\n   }\r\n  return families\r\n}\r\n\r\nconst checkExistFatherAndMother = async (userId,ctx)=>{\r\n  const myFamilies = await ctx.db.user({id:userId}).families()\r\n  const father = myFamilies.filter(family=>family.relationship==='father')\r\n  const mother = myFamilies.filter(family=>family.relationship==='mother')\r\n  if(father.length===0|| mother.length===0){\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nconst createFamilyGroupById=async (id,ctx)=>{\r\n  // 创建父母familyGroup\r\n  // 检查是否已经输入父母姓名\r\n  const BROTHER_SISTER = ['oldbrother','youngsister','youngbrother','oldsister']\r\n  const myFamilies = await ctx.db.user({id}).families()\r\n  const me = await ctx.db.user({id})\r\n  const father = myFamilies.filter(family=>family.relationship==='father')\r\n  if(father.length===0){\r\n    return null\r\n    // throw new Error(\"尚未输入父亲姓名\")\r\n  }\r\n  const fatherPerson = await ctx.db.family({id:father[0].id}).to()\r\n  const mother = myFamilies.filter(family=>family.relationship==='mother')\r\n  if(mother.length===0){\r\n    return null\r\n    // throw new Error(\"尚未输入母亲姓名\")\r\n  }\r\n  const motherPerson = await ctx.db.family({id:mother[0].id}).to()\r\n  // -----------------------------------------------\r\n  // 获取我的兄弟姐妹\r\n  const myBSFamilies = myFamilies.filter(family=>!!~BROTHER_SISTER.indexOf(family.relationship)) \r\n  const MBS = []\r\n  for (const myBSFamily of myBSFamilies){\r\n    const BS = await ctx.db.family({id:myBSFamily.id}).to().user()\r\n    if(BS){\r\n      MBS.push(BS)\r\n    }\r\n  }\r\n  MBS.push(me)\r\n  const MBSids = MBS.map(mbs=>({id:mbs.id}))\r\n  const myParentsGroupFamilies = await getAllFamilies(myFamilies,ctx)\r\n  const myParentsGroupFamiliesIds = myParentsGroupFamilies.map(family=>{\r\n    return {id:family.id}\r\n  })\r\n  // 方案一：\r\n  // 检查familyGroup中的users是否已经包含了自己和兄弟姐妹，如果都包含了则更新faimlyGroup，\r\n  // 如果没有包含的话，则删除自己和兄弟姐妹所有的familyGroup然后，再创建一个新的familyGroup.\r\n  // 如果familyGroup中的father和mother都是user则不可删除。\r\n  // 情况分类：判断哪个familyGroup为真\r\n  // A:如果mbs都没有familyGroup则直接以刷新者新建一个。\r\n  // B:如果只有一个人有familyGroup，则以该人的familyGroup为真。\r\n  // C:如果有超过一个人有familyGroup，则：\r\n  // a:如果familyGroup已经包含了所有的兄弟姐妹，即所有人的familyGroup已经是同一个。则该familyGroup为真。\r\n  // b:\r\n  // (1)有一个人的familyGroup中的father和mother都是user,则该familyGroup为真，其他人的familyGroup不是这个的直接删除。\r\n  // (2)没有一个人的familyGroup中的father和mother都是user.\r\n  // (2.1)有一个人faimlyGroup中的father或者mother是user,则该familyGroup为真，其他人的familyGroup直接删除。\r\n  // (2.2)没有一个人的familyGroup中的father或者mother是user,则以该familyGroup为真，删除其他的familyGroup。\r\n  let familyGroup\r\n  const mbsFamilyGroups = await ctx.db.familyGroups({\r\n    where:{\r\n      OR:MBSids.map(mbsId=>({users_some:mbsId}))\r\n    }\r\n  })\r\n  if(mbsFamilyGroups.length===0){\r\n    // 所有人都没有,直接创建一个\r\n    familyGroup =  await ctx.db.createFamilyGroup({\r\n      name:`${fatherPerson.name}和${motherPerson.name}的群`,\r\n      creater:{connect:{id}},\r\n      father:{connect:{id:fatherPerson.id}},\r\n      mother:{connect:{id:motherPerson.id}},\r\n      families:{connect:myParentsGroupFamiliesIds},\r\n      users:{connect:MBSids}\r\n    })\r\n  }else if(mbsFamilyGroups.length===1){\r\n    // 可能是只有一个人有，或者所有人有一个，则更新该familyGroup\r\n      // 清空已有的familyGroup的families连接\r\n      const existFamilyGroupFamilies = await ctx.db.familyGroup(\r\n      {id:mbsFamilyGroups[0].id}\r\n    ).families()\r\n    const exsitFamilyGroupFamilyIds = existFamilyGroupFamilies.map(family=>({id:family.id}))\r\n    await ctx.db.updateFamilyGroup({\r\n      where:{id:mbsFamilyGroups[0].id},\r\n      data:{\r\n        families:{disconnect:exsitFamilyGroupFamilyIds},\r\n      }\r\n    })\r\n    // 重新建立连接\r\n    familyGroup = await ctx.db.updateFamilyGroup({\r\n      where:{id:mbsFamilyGroups[0].id},\r\n      data:{\r\n        families:{connect:myParentsGroupFamiliesIds},\r\n        users:{connect:MBSids}\r\n      }\r\n    })\r\n  }else if(mbsFamilyGroups.length>1){\r\n    // 有多个人有familyGroup，需要判断哪个为真。\r\n    // (1)如果父母都为user者，则该familyGroup为真。\r\n    const hasFatherAndMotherFamilyGroup = []\r\n    for(const mbsFamilyGroup of mbsFamilyGroups){\r\n      const fatherUser = await ctx.db.familyGroup({id:mbsFamilyGroup.id}).father().user()\r\n      const motherUser = await ctx.db.familyGroup({id:mbsFamilyGroup.id}).mother().user()\r\n      if(fatherUser && motherUser){\r\n        hasFatherAndMotherFamilyGroup.push(mbsFamilyGroup)\r\n      }\r\n    }\r\n    if(hasFatherAndMotherFamilyGroup.length>0){\r\n      // 删除其他的familyGroup\r\n      const nothasFatherAndMotherFaimlyGroupIds = mbsFamilyGroups.filter((mbsFamilyGroup)=>{\r\n         return mbsFamilyGroup.id!==hasFatherAndMotherFamilyGroup[0].id\r\n      }).map(fg=>({id:fg.id}))\r\n      const count = await ctx.db.deleteManyFamilyGroups({\r\n        OR:nothasFatherAndMotherFaimlyGroupIds\r\n      })\r\n      // 清空已有的familyGroup的families连接\r\n      const existFamilyGroupFamilies = await ctx.db.familyGroup(\r\n        {id:hasFatherAndMotherFamilyGroup[0].id}\r\n      ).families()\r\n      const exsitFamilyGroupFamilyIds = existFamilyGroupFamilies.map(family=>({id:family.id}))\r\n      await ctx.db.updateFamilyGroup({\r\n        where:{id:hasFatherAndMotherFamilyGroup[0].id},\r\n        data:{\r\n          families:{disconnect:exsitFamilyGroupFamilyIds},\r\n        }\r\n      })\r\n      // 重新建立连接\r\n      // 更新该familyGroup\r\n      familyGroup = await ctx.db.updateFamilyGroup({\r\n        where:{id:hasFatherAndMotherFamilyGroup[0].id},\r\n        data:{\r\n          families:{connect:myParentsGroupFamiliesIds},\r\n          users:{connect:MBSids}\r\n        }\r\n      })\r\n    }else{\r\n      // 如果没有一个人的father和mother全部为user，但有一个是\r\n      const hasFatherOrMotherFamilyGroup = []\r\n      for(const mbsFamilyGroup of mbsFamilyGroups){\r\n        const fatherUser = await ctx.db.familyGroup({id:mbsFamilyGroup.id}).father().user()\r\n        const motherUser = await ctx.db.familyGroup({id:mbsFamilyGroup.id}).mother().user()\r\n        if(fatherUser || motherUser){\r\n          hasFatherOrMotherFamilyGroup.push(mbsFamilyGroup)\r\n        }\r\n      }\r\n      if(hasFatherOrMotherFamilyGroup.length>0){\r\n        // 删除其他的familyGroup\r\n        const nothasFatherOrMotherFaimlyGroupIds = mbsFamilyGroups.filter((mbsFamilyGroup)=>{\r\n           return mbsFamilyGroup.id!==hasFatherOrMotherFamilyGroup[0].id\r\n        }).map(fg=>({id:fg.id}))\r\n\r\n        const count = await ctx.db.deleteManyFamilyGroups({\r\n          OR:nothasFatherOrMotherFaimlyGroupIds\r\n        })\r\n\r\n        // 清空已有的familyGroup的families连接\r\n        const existFamilyGroupFamilies = await ctx.db.familyGroup(\r\n          {id:hasFatherOrMotherFamilyGroup[0].id}\r\n        ).families()\r\n        const exsitFamilyGroupFamilyIds = existFamilyGroupFamilies.map(family=>({id:family.id}))\r\n        await ctx.db.updateFamilyGroup({\r\n          where:{id:hasFatherOrMotherFamilyGroup[0].id},\r\n          data:{\r\n            families:{disconnect:exsitFamilyGroupFamilyIds},\r\n          }\r\n        })\r\n        // 重新建立连接\r\n        // 更新该familyGroup\r\n        familyGroup = await ctx.db.updateFamilyGroup({\r\n          where:{id:hasFatherOrMotherFamilyGroup[0].id},\r\n          data:{\r\n            families:{connect:myParentsGroupFamiliesIds},\r\n            users:{connect:MBSids}\r\n          }\r\n        })\r\n      }else{\r\n        // 如果所有人的father和mother都不是,则以任意一个为真,都以第一个为真\r\n        // 删除其他的familyGroup\r\n        const otherFaimlyGroupIds = mbsFamilyGroups.filter((mbsFamilyGroup)=>{\r\n          return mbsFamilyGroup.id!==mbsFamilyGroups[0].id\r\n       }).map(fg=>({id:fg.id}))\r\n\r\n       const count = await ctx.db.deleteManyFamilyGroups({\r\n         OR:otherFaimlyGroupIds\r\n       })\r\n\r\n        // 清空已有的familyGroup的families连接\r\n        const existFamilyGroupFamilies = await ctx.db.familyGroup(\r\n          {id:mbsFamilyGroups[0].id}\r\n        ).families()\r\n        const exsitFamilyGroupFamilyIds = existFamilyGroupFamilies.map(family=>({id:family.id}))\r\n\r\n        await ctx.db.updateFamilyGroup({\r\n          where:{id:mbsFamilyGroups[0].id},\r\n          data:{\r\n            families:{disconnect:exsitFamilyGroupFamilyIds},\r\n          }\r\n        })\r\n        // 重新建立连接\r\n        familyGroup = await ctx.db.updateFamilyGroup({\r\n          where:{id:mbsFamilyGroups[0].id},\r\n          data:{\r\n            families:{connect:myParentsGroupFamiliesIds},\r\n            users:{connect:MBSids}\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  return familyGroup\r\n}\r\n\r\nconst pubGroupFamily = async (familyGroup, ctx) => {\r\n  const groupFamilies = await ctx.db.familyGroup({ id: familyGroup.id }).families()\r\n  for (const family of groupFamilies) {\r\n    const user = await ctx.db.family({ id: family.id }).to().user()\r\n    if (user) {\r\n      pubsub.publish(FAMILYGROUP_CHANGED, { [FAMILYGROUP_CHANGED]: { \"text\": user.id } })\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst refreshMyFamilyGroups = async (parent, args, ctx) => {\r\n  const userId = getUserId(ctx)\r\n  if (!userId) {\r\n    throw new Error(\"用户不存在\")\r\n  }\r\n  const user = await ctx.db.user({ uid: userId })\r\n  if (!user) {\r\n    throw new Error(\"用户不存在\")\r\n  }\r\n\r\n  const groupUsersId = []\r\n  const meAndSpousesfamilies = []\r\n  groupUsersId.push({ id: user.id })\r\n  const meFamilies = await ctx.db.user({ id: user.id }).families()\r\n  meAndSpousesfamilies.push(meFamilies)\r\n  // 配偶\r\n  const mySpouseFamilies = meFamilies.filter(family => !!~['wife', 'husband'].indexOf(family.relationship))\r\n  for (const mySpouseFamily of mySpouseFamilies) {\r\n    const mySpouse = await ctx.db.family({ id: mySpouseFamily.id }).to().user()\r\n    if (mySpouse) {\r\n      groupUsersId.push({ id: mySpouse.id })\r\n      const spouseFamilies = await ctx.db.user({ id: mySpouse.id }).families()\r\n      meAndSpousesfamilies.push(spouseFamilies)\r\n    }\r\n  }\r\n  for (const myFamilies of meAndSpousesfamilies) {\r\n    // 我和配偶的家庭组全部创建\r\n    // parents\r\n    let p\r\n    // father's parents\r\n    let fp\r\n    // father's father's parents\r\n    let ffp\r\n    // father's mother's parents\r\n    let fmp\r\n    // mother's parents\r\n    let mp\r\n    // mother's father's parents\r\n    let mfp\r\n    // mother's mother's parents\r\n    let mmp\r\n    // 如果有mother pa或者其上面的父母\r\n    let mpast\r\n    // 如果有father pa或者其上面的父母\r\n    let fpast\r\n    // 创建父母群\r\n    const me = await ctx.db.family({ id: myFamilies[0].id }).from()\r\n    if (me.id === user.id) {\r\n      p = await createFamilyGroupById(me.id, ctx)\r\n    } else {\r\n      try {\r\n        p = await createFamilyGroupById(me.id, ctx)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    // 创建父母的父母群\r\n\r\n    const familyFather = myFamilies.filter(family => family.relationship === 'father')\r\n    const father = await ctx.db.family({ id: familyFather[0].id }).to().user()\r\n    if (father) {\r\n      // 创建祖父母群\r\n      try {\r\n        groupUsersId.push({ id: father.id })\r\n        fp = await createFamilyGroupById(father.id, ctx)\r\n        // 创建爷爷和奶奶的父母\r\n        const fatherFamilies = await ctx.db.user({ id: father.id }).families()\r\n        const fatherFamilyFather = fatherFamilies.filter(family => family.relationship === 'father')\r\n        const grandpa = await ctx.db.family({ id: fatherFamilyFather[0].id }).to().user()\r\n        if (grandpa) {\r\n          // 创建曾祖父母\r\n          groupUsersId.push({ id: grandpa.id })\r\n          ffp = await createFamilyGroupById(grandpa.id, ctx)\r\n        }\r\n        const motherFamilyFather = fatherFamilies.filter(family => family.relationship === 'mother')\r\n        const grandma = await ctx.db.family({ id: motherFamilyFather[0].id }).to().user()\r\n        if (grandma) {\r\n          // 创建曾外祖父\r\n          groupUsersId.push({ id: grandma.id })\r\n          fmp = await createFamilyGroupById(grandma.id, ctx)\r\n        }\r\n      } catch (error) {\r\n        console.log(error.message)\r\n      }\r\n    }\r\n    const familyMother = myFamilies.filter(family => family.relationship === 'mother')\r\n    const mother = await ctx.db.family({ id: familyMother[0].id }).to().user()\r\n    if (mother) {\r\n      try {\r\n        // 创建外祖父母群\r\n        groupUsersId.push({ id: mother.id })\r\n        mp = await createFamilyGroupById(mother.id, ctx)\r\n        // 创建姥姥和姥爷的父母\r\n        const motherFamilies = await ctx.db.user({ id: mother.id }).families()\r\n        const fatherFamilyMother = motherFamilies.filter(family => family.relationship === 'father')\r\n        const grandpa = await ctx.db.family({ id: fatherFamilyMother[0].id }).to().user()\r\n        if (grandpa) {\r\n          // 创建外曾祖父母\r\n          groupUsersId.push({ id: grandpa.id })\r\n          mfp = await createFamilyGroupById(grandpa.id, ctx)\r\n        }\r\n        const motherFamilyMother = motherFamilies.filter(family => family.relationship === 'mother')\r\n        const grandma = await ctx.db.family({ id: motherFamilyMother[0].id }).to().user()\r\n        if (grandma) {\r\n          // 创建外曾外祖父母\r\n          groupUsersId.push({ id: grandma.id })\r\n          mmp = await createFamilyGroupById(grandma.id, ctx)\r\n        }\r\n      } catch (error) {\r\n        console.log(error.message)\r\n      }\r\n    }\r\n\r\n    // 向所有的成员推送通知\r\n    if (mmp || mfp) {\r\n      // 分别推送到mmp中的所有family.user和mfp的所有family.user\r\n      if (mmp) {\r\n        pubGroupFamily(mmp, ctx)\r\n      }\r\n      if (mfp) {\r\n        pubGroupFamily(mfp, ctx)\r\n      }\r\n      mpast = true\r\n    } else if (mp) {\r\n      // 推送到mp的所有family.user\r\n      pubGroupFamily(mp, ctx)\r\n      mpast = true\r\n    }\r\n\r\n    if (ffp || fmp) {\r\n      if (ffp) {\r\n        pubGroupFamily(ffp, ctx)\r\n      }\r\n      if (fmp) {\r\n        pubGroupFamily(ffp, ctx)\r\n      }\r\n      fpast = true\r\n    } else if (fp) {\r\n      pubGroupFamily(fp, ctx)\r\n      fpast = true\r\n    }\r\n\r\n    if (!fpast && !mpast) {\r\n      // 推送到p的所有family.user\r\n      pubGroupFamily(p, ctx)\r\n    }\r\n  }\r\n\r\n  // 我的群由子女负责创建\r\n  const sonAndDaughters = meFamilies.filter(family => !!~['son', 'daughter'].indexOf(family.relationship))\r\n  for (const sonAndDaughter of sonAndDaughters) {\r\n    const sd = await ctx.db.family({ id: sonAndDaughter.id }).to().user()\r\n    if (sd) {\r\n      groupUsersId.push({ id: sd.id })\r\n    }\r\n  }\r\n\r\n  return ctx.db.familyGroups({\r\n    where: {\r\n      OR: groupUsersId.map(usersId => ({ users_some: usersId }))\r\n    }\r\n  })\r\n}\r\n\r\n\r\nconst getFileTypeByExt=(ext)=> {\r\n  const imgExt = ['png','jpg','gif','bmp','jpeg'];\r\n  const videoExt = ['mp4','mov'];\r\n  for (let i = 0; i < imgExt.length; i++){\r\n      const type = imgExt[i];\r\n      if (ext === type || ext === type.toUpperCase()){\r\n          return 0;\r\n      }\r\n  }\r\n  for (let i = 0; i < videoExt.length; i++){\r\n      const type = videoExt[i];\r\n      if (ext === type || ext === type.toUpperCase()){\r\n          return 1;\r\n      }\r\n  }\r\n  return -1;\r\n}\r\nconst getFileExt=(filepath)=> {\r\n  if (filepath !== \"\") {\r\n      if (filepath.indexOf(\".\") === -1){\r\n          return '';\r\n      }\r\n      const pos = filepath.replace(/.+\\./, \"\");\r\n      return pos;\r\n  }\r\n  return '';\r\n}\r\n\r\n\r\nconst getFileName=(ext)=> {\r\n  const timestamp = new Date().getTime();\r\n  const randNum = Math.floor(Math.random()*1000+1);\r\n  const fileName = `${_getNowFormatDate()}_${timestamp}_${randNum}.${ext}`;\r\n  return fileName;\r\n}\r\n\r\nconst _getNowFormatDate=()=> {\r\n  const date = new Date();\r\n  const seperator1 = \"-\";\r\n  const year = date.getFullYear();\r\n  let month = date.getMonth() + 1;\r\n  let strDate = date.getDate();\r\n  if (month >= 1 && month <= 9) {\r\n      month = `0${month}`;\r\n  }\r\n  if (strDate >= 0 && strDate <= 9) {\r\n      strDate =`0${strDate}`;\r\n  }\r\n  const currentdate = year + seperator1 + month + seperator1 + strDate;\r\n  return currentdate;\r\n}\r\n\r\nmodule.exports = {\r\n  getUserId,\r\n  checkeCtxUserExist,\r\n  APP_SECRET,\r\n  getUser,\r\n  updateCommonUserFamily,\r\n  getCommonFamilies,\r\n  getIntersectionFamiles,\r\n  getDifferentFamilies,\r\n  getAllFamilies,\r\n  createFamilyGroupById,\r\n  refreshMyFamilyGroups,\r\n  checkExistFatherAndMother,\r\n  getFileTypeByExt,\r\n  getFileName,\r\n  getFileExt,\r\n}\r\n"],"file":"utils.js"}