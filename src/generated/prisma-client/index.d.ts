// Code generated by Prisma (prisma@1.21.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  area: (where?: AreaWhereInput) => Promise<boolean>;
  city: (where?: CityWhereInput) => Promise<boolean>;
  collegeEntranceExam: (
    where?: CollegeEntranceExamWhereInput
  ) => Promise<boolean>;
  education: (where?: EducationWhereInput) => Promise<boolean>;
  family: (where?: FamilyWhereInput) => Promise<boolean>;
  major: (where?: MajorWhereInput) => Promise<boolean>;
  person: (where?: PersonWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  province: (where?: ProvinceWhereInput) => Promise<boolean>;
  regStatus: (where?: RegStatusWhereInput) => Promise<boolean>;
  street: (where?: StreetWhereInput) => Promise<boolean>;
  subject: (where?: SubjectWhereInput) => Promise<boolean>;
  university: (where?: UniversityWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  village: (where?: VillageWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  area: (where: AreaWhereUniqueInput) => AreaPromise;
  areas: (
    args?: {
      where?: AreaWhereInput;
      orderBy?: AreaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Area>;
  areasConnection: (
    args?: {
      where?: AreaWhereInput;
      orderBy?: AreaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AreaConnectionPromise;
  city: (where: CityWhereUniqueInput) => CityPromise;
  cities: (
    args?: {
      where?: CityWhereInput;
      orderBy?: CityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<City>;
  citiesConnection: (
    args?: {
      where?: CityWhereInput;
      orderBy?: CityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CityConnectionPromise;
  collegeEntranceExam: (
    where: CollegeEntranceExamWhereUniqueInput
  ) => CollegeEntranceExamPromise;
  collegeEntranceExams: (
    args?: {
      where?: CollegeEntranceExamWhereInput;
      orderBy?: CollegeEntranceExamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CollegeEntranceExam>;
  collegeEntranceExamsConnection: (
    args?: {
      where?: CollegeEntranceExamWhereInput;
      orderBy?: CollegeEntranceExamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CollegeEntranceExamConnectionPromise;
  education: (where: EducationWhereUniqueInput) => EducationPromise;
  educations: (
    args?: {
      where?: EducationWhereInput;
      orderBy?: EducationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Education>;
  educationsConnection: (
    args?: {
      where?: EducationWhereInput;
      orderBy?: EducationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EducationConnectionPromise;
  family: (where: FamilyWhereUniqueInput) => FamilyPromise;
  families: (
    args?: {
      where?: FamilyWhereInput;
      orderBy?: FamilyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Family>;
  familiesConnection: (
    args?: {
      where?: FamilyWhereInput;
      orderBy?: FamilyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FamilyConnectionPromise;
  major: (where: MajorWhereUniqueInput) => MajorPromise;
  majors: (
    args?: {
      where?: MajorWhereInput;
      orderBy?: MajorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Major>;
  majorsConnection: (
    args?: {
      where?: MajorWhereInput;
      orderBy?: MajorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MajorConnectionPromise;
  person: (where: PersonWhereUniqueInput) => PersonPromise;
  persons: (
    args?: {
      where?: PersonWhereInput;
      orderBy?: PersonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Person>;
  personsConnection: (
    args?: {
      where?: PersonWhereInput;
      orderBy?: PersonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PersonConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  province: (where: ProvinceWhereUniqueInput) => ProvincePromise;
  provinces: (
    args?: {
      where?: ProvinceWhereInput;
      orderBy?: ProvinceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Province>;
  provincesConnection: (
    args?: {
      where?: ProvinceWhereInput;
      orderBy?: ProvinceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProvinceConnectionPromise;
  regStatus: (where: RegStatusWhereUniqueInput) => RegStatusPromise;
  regStatuses: (
    args?: {
      where?: RegStatusWhereInput;
      orderBy?: RegStatusOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RegStatus>;
  regStatusesConnection: (
    args?: {
      where?: RegStatusWhereInput;
      orderBy?: RegStatusOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RegStatusConnectionPromise;
  street: (where: StreetWhereUniqueInput) => StreetPromise;
  streets: (
    args?: {
      where?: StreetWhereInput;
      orderBy?: StreetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Street>;
  streetsConnection: (
    args?: {
      where?: StreetWhereInput;
      orderBy?: StreetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StreetConnectionPromise;
  subject: (where: SubjectWhereUniqueInput) => SubjectPromise;
  subjects: (
    args?: {
      where?: SubjectWhereInput;
      orderBy?: SubjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Subject>;
  subjectsConnection: (
    args?: {
      where?: SubjectWhereInput;
      orderBy?: SubjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SubjectConnectionPromise;
  university: (where: UniversityWhereUniqueInput) => UniversityPromise;
  universities: (
    args?: {
      where?: UniversityWhereInput;
      orderBy?: UniversityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<University>;
  universitiesConnection: (
    args?: {
      where?: UniversityWhereInput;
      orderBy?: UniversityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UniversityConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  village: (where: VillageWhereUniqueInput) => VillagePromise;
  villages: (
    args?: {
      where?: VillageWhereInput;
      orderBy?: VillageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Village>;
  villagesConnection: (
    args?: {
      where?: VillageWhereInput;
      orderBy?: VillageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VillageConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createArea: (data: AreaCreateInput) => AreaPromise;
  updateArea: (
    args: { data: AreaUpdateInput; where: AreaWhereUniqueInput }
  ) => AreaPromise;
  updateManyAreas: (
    args: { data: AreaUpdateManyMutationInput; where?: AreaWhereInput }
  ) => BatchPayloadPromise;
  upsertArea: (
    args: {
      where: AreaWhereUniqueInput;
      create: AreaCreateInput;
      update: AreaUpdateInput;
    }
  ) => AreaPromise;
  deleteArea: (where: AreaWhereUniqueInput) => AreaPromise;
  deleteManyAreas: (where?: AreaWhereInput) => BatchPayloadPromise;
  createCity: (data: CityCreateInput) => CityPromise;
  updateCity: (
    args: { data: CityUpdateInput; where: CityWhereUniqueInput }
  ) => CityPromise;
  updateManyCities: (
    args: { data: CityUpdateManyMutationInput; where?: CityWhereInput }
  ) => BatchPayloadPromise;
  upsertCity: (
    args: {
      where: CityWhereUniqueInput;
      create: CityCreateInput;
      update: CityUpdateInput;
    }
  ) => CityPromise;
  deleteCity: (where: CityWhereUniqueInput) => CityPromise;
  deleteManyCities: (where?: CityWhereInput) => BatchPayloadPromise;
  createCollegeEntranceExam: (
    data: CollegeEntranceExamCreateInput
  ) => CollegeEntranceExamPromise;
  updateCollegeEntranceExam: (
    args: {
      data: CollegeEntranceExamUpdateInput;
      where: CollegeEntranceExamWhereUniqueInput;
    }
  ) => CollegeEntranceExamPromise;
  updateManyCollegeEntranceExams: (
    args: {
      data: CollegeEntranceExamUpdateManyMutationInput;
      where?: CollegeEntranceExamWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCollegeEntranceExam: (
    args: {
      where: CollegeEntranceExamWhereUniqueInput;
      create: CollegeEntranceExamCreateInput;
      update: CollegeEntranceExamUpdateInput;
    }
  ) => CollegeEntranceExamPromise;
  deleteCollegeEntranceExam: (
    where: CollegeEntranceExamWhereUniqueInput
  ) => CollegeEntranceExamPromise;
  deleteManyCollegeEntranceExams: (
    where?: CollegeEntranceExamWhereInput
  ) => BatchPayloadPromise;
  createEducation: (data: EducationCreateInput) => EducationPromise;
  updateEducation: (
    args: { data: EducationUpdateInput; where: EducationWhereUniqueInput }
  ) => EducationPromise;
  updateManyEducations: (
    args: {
      data: EducationUpdateManyMutationInput;
      where?: EducationWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertEducation: (
    args: {
      where: EducationWhereUniqueInput;
      create: EducationCreateInput;
      update: EducationUpdateInput;
    }
  ) => EducationPromise;
  deleteEducation: (where: EducationWhereUniqueInput) => EducationPromise;
  deleteManyEducations: (where?: EducationWhereInput) => BatchPayloadPromise;
  createFamily: (data: FamilyCreateInput) => FamilyPromise;
  updateFamily: (
    args: { data: FamilyUpdateInput; where: FamilyWhereUniqueInput }
  ) => FamilyPromise;
  updateManyFamilies: (
    args: { data: FamilyUpdateManyMutationInput; where?: FamilyWhereInput }
  ) => BatchPayloadPromise;
  upsertFamily: (
    args: {
      where: FamilyWhereUniqueInput;
      create: FamilyCreateInput;
      update: FamilyUpdateInput;
    }
  ) => FamilyPromise;
  deleteFamily: (where: FamilyWhereUniqueInput) => FamilyPromise;
  deleteManyFamilies: (where?: FamilyWhereInput) => BatchPayloadPromise;
  createMajor: (data: MajorCreateInput) => MajorPromise;
  updateMajor: (
    args: { data: MajorUpdateInput; where: MajorWhereUniqueInput }
  ) => MajorPromise;
  updateManyMajors: (
    args: { data: MajorUpdateManyMutationInput; where?: MajorWhereInput }
  ) => BatchPayloadPromise;
  upsertMajor: (
    args: {
      where: MajorWhereUniqueInput;
      create: MajorCreateInput;
      update: MajorUpdateInput;
    }
  ) => MajorPromise;
  deleteMajor: (where: MajorWhereUniqueInput) => MajorPromise;
  deleteManyMajors: (where?: MajorWhereInput) => BatchPayloadPromise;
  createPerson: (data: PersonCreateInput) => PersonPromise;
  updatePerson: (
    args: { data: PersonUpdateInput; where: PersonWhereUniqueInput }
  ) => PersonPromise;
  updateManyPersons: (
    args: { data: PersonUpdateManyMutationInput; where?: PersonWhereInput }
  ) => BatchPayloadPromise;
  upsertPerson: (
    args: {
      where: PersonWhereUniqueInput;
      create: PersonCreateInput;
      update: PersonUpdateInput;
    }
  ) => PersonPromise;
  deletePerson: (where: PersonWhereUniqueInput) => PersonPromise;
  deleteManyPersons: (where?: PersonWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createProvince: (data: ProvinceCreateInput) => ProvincePromise;
  updateProvince: (
    args: { data: ProvinceUpdateInput; where: ProvinceWhereUniqueInput }
  ) => ProvincePromise;
  updateManyProvinces: (
    args: { data: ProvinceUpdateManyMutationInput; where?: ProvinceWhereInput }
  ) => BatchPayloadPromise;
  upsertProvince: (
    args: {
      where: ProvinceWhereUniqueInput;
      create: ProvinceCreateInput;
      update: ProvinceUpdateInput;
    }
  ) => ProvincePromise;
  deleteProvince: (where: ProvinceWhereUniqueInput) => ProvincePromise;
  deleteManyProvinces: (where?: ProvinceWhereInput) => BatchPayloadPromise;
  createRegStatus: (data: RegStatusCreateInput) => RegStatusPromise;
  updateRegStatus: (
    args: { data: RegStatusUpdateInput; where: RegStatusWhereUniqueInput }
  ) => RegStatusPromise;
  upsertRegStatus: (
    args: {
      where: RegStatusWhereUniqueInput;
      create: RegStatusCreateInput;
      update: RegStatusUpdateInput;
    }
  ) => RegStatusPromise;
  deleteRegStatus: (where: RegStatusWhereUniqueInput) => RegStatusPromise;
  deleteManyRegStatuses: (where?: RegStatusWhereInput) => BatchPayloadPromise;
  createStreet: (data: StreetCreateInput) => StreetPromise;
  updateStreet: (
    args: { data: StreetUpdateInput; where: StreetWhereUniqueInput }
  ) => StreetPromise;
  updateManyStreets: (
    args: { data: StreetUpdateManyMutationInput; where?: StreetWhereInput }
  ) => BatchPayloadPromise;
  upsertStreet: (
    args: {
      where: StreetWhereUniqueInput;
      create: StreetCreateInput;
      update: StreetUpdateInput;
    }
  ) => StreetPromise;
  deleteStreet: (where: StreetWhereUniqueInput) => StreetPromise;
  deleteManyStreets: (where?: StreetWhereInput) => BatchPayloadPromise;
  createSubject: (data: SubjectCreateInput) => SubjectPromise;
  updateSubject: (
    args: { data: SubjectUpdateInput; where: SubjectWhereUniqueInput }
  ) => SubjectPromise;
  updateManySubjects: (
    args: { data: SubjectUpdateManyMutationInput; where?: SubjectWhereInput }
  ) => BatchPayloadPromise;
  upsertSubject: (
    args: {
      where: SubjectWhereUniqueInput;
      create: SubjectCreateInput;
      update: SubjectUpdateInput;
    }
  ) => SubjectPromise;
  deleteSubject: (where: SubjectWhereUniqueInput) => SubjectPromise;
  deleteManySubjects: (where?: SubjectWhereInput) => BatchPayloadPromise;
  createUniversity: (data: UniversityCreateInput) => UniversityPromise;
  updateUniversity: (
    args: { data: UniversityUpdateInput; where: UniversityWhereUniqueInput }
  ) => UniversityPromise;
  updateManyUniversities: (
    args: {
      data: UniversityUpdateManyMutationInput;
      where?: UniversityWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUniversity: (
    args: {
      where: UniversityWhereUniqueInput;
      create: UniversityCreateInput;
      update: UniversityUpdateInput;
    }
  ) => UniversityPromise;
  deleteUniversity: (where: UniversityWhereUniqueInput) => UniversityPromise;
  deleteManyUniversities: (where?: UniversityWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVillage: (data: VillageCreateInput) => VillagePromise;
  updateVillage: (
    args: { data: VillageUpdateInput; where: VillageWhereUniqueInput }
  ) => VillagePromise;
  updateManyVillages: (
    args: { data: VillageUpdateManyMutationInput; where?: VillageWhereInput }
  ) => BatchPayloadPromise;
  upsertVillage: (
    args: {
      where: VillageWhereUniqueInput;
      create: VillageCreateInput;
      update: VillageUpdateInput;
    }
  ) => VillagePromise;
  deleteVillage: (where: VillageWhereUniqueInput) => VillagePromise;
  deleteManyVillages: (where?: VillageWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  area: (
    where?: AreaSubscriptionWhereInput
  ) => AreaSubscriptionPayloadSubscription;
  city: (
    where?: CitySubscriptionWhereInput
  ) => CitySubscriptionPayloadSubscription;
  collegeEntranceExam: (
    where?: CollegeEntranceExamSubscriptionWhereInput
  ) => CollegeEntranceExamSubscriptionPayloadSubscription;
  education: (
    where?: EducationSubscriptionWhereInput
  ) => EducationSubscriptionPayloadSubscription;
  family: (
    where?: FamilySubscriptionWhereInput
  ) => FamilySubscriptionPayloadSubscription;
  major: (
    where?: MajorSubscriptionWhereInput
  ) => MajorSubscriptionPayloadSubscription;
  person: (
    where?: PersonSubscriptionWhereInput
  ) => PersonSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  province: (
    where?: ProvinceSubscriptionWhereInput
  ) => ProvinceSubscriptionPayloadSubscription;
  regStatus: (
    where?: RegStatusSubscriptionWhereInput
  ) => RegStatusSubscriptionPayloadSubscription;
  street: (
    where?: StreetSubscriptionWhereInput
  ) => StreetSubscriptionPayloadSubscription;
  subject: (
    where?: SubjectSubscriptionWhereInput
  ) => SubjectSubscriptionPayloadSubscription;
  university: (
    where?: UniversitySubscriptionWhereInput
  ) => UniversitySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  village: (
    where?: VillageSubscriptionWhereInput
  ) => VillageSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EducationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CollegeEntranceExamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "culscore_ASC"
  | "culscore_DESC"
  | "proscore_ASC"
  | "proscore_DESC"
  | "candidatenum_ASC"
  | "candidatenum_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UniversityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "identifier_ASC"
  | "identifier_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StreetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RegStatusOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AreaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PersonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "birthdaycalendar_ASC"
  | "birthdaycalendar_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "uid_ASC"
  | "uid_DESC"
  | "token_ASC"
  | "token_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VillageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type FamilyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "relationship_ASC"
  | "relationship_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MajorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "category_ASC"
  | "category_DESC"
  | "code_ASC"
  | "code_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProvinceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SubjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithWhereUniqueWithoutBirthVillageInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBirthVillageDataInput;
}

export type AreaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  code?: String;
}>;

export interface UserUpdateWithoutBirthCityDataInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceUpdateOneWithoutPeopleInput;
  birthArea?: AreaUpdateOneWithoutPeopleInput;
  birthStreet?: StreetUpdateOneWithoutPeopleInput;
  birthVillage?: VillageUpdateOneWithoutPeopleInput;
  uid?: String;
  token?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  regStatus?: RegStatusUpdateOneWithoutApplicantsInput;
  families?: FamilyUpdateManyWithoutFromInput;
}

export interface MajorWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  education?: EducationWhereInput;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  AND?: MajorWhereInput[] | MajorWhereInput;
  OR?: MajorWhereInput[] | MajorWhereInput;
  NOT?: MajorWhereInput[] | MajorWhereInput;
}

export interface AreaUpdateOneWithoutPeopleInput {
  create?: AreaCreateWithoutPeopleInput;
  update?: AreaUpdateWithoutPeopleDataInput;
  upsert?: AreaUpsertWithoutPeopleInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: AreaWhereUniqueInput;
}

export interface PersonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  user?: UserWhereInput;
  families_every?: FamilyWhereInput;
  families_some?: FamilyWhereInput;
  families_none?: FamilyWhereInput;
  AND?: PersonWhereInput[] | PersonWhereInput;
  OR?: PersonWhereInput[] | PersonWhereInput;
  NOT?: PersonWhereInput[] | PersonWhereInput;
}

export interface PostCreateWithoutAuthorInput {
  isPublished?: Boolean;
  title: String;
  content: String;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface RegStatusCreateOneWithoutApplicantsInput {
  create?: RegStatusCreateWithoutApplicantsInput;
  connect?: RegStatusWhereUniqueInput;
}

export interface AreaUpdateWithoutPeopleDataInput {
  code?: String;
  name?: String;
  city?: CityUpdateOneRequiredWithoutAreasInput;
  towns?: StreetUpdateManyWithoutAreaInput;
}

export interface RegStatusCreateWithoutApplicantsInput {
  university?: UniversityCreateOneInput;
  major: MajorCreateOneInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UniversityCreateOneInput {
  create?: UniversityCreateInput;
  connect?: UniversityWhereUniqueInput;
}

export interface UniversitySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UniversityWhereInput;
  AND?: UniversitySubscriptionWhereInput[] | UniversitySubscriptionWhereInput;
  OR?: UniversitySubscriptionWhereInput[] | UniversitySubscriptionWhereInput;
  NOT?: UniversitySubscriptionWhereInput[] | UniversitySubscriptionWhereInput;
}

export interface UniversityCreateInput {
  name: String;
  education: EducationCreateOneInput;
  identifier: String;
  city: CityCreateOneInput;
}

export interface StreetSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StreetWhereInput;
  AND?: StreetSubscriptionWhereInput[] | StreetSubscriptionWhereInput;
  OR?: StreetSubscriptionWhereInput[] | StreetSubscriptionWhereInput;
  NOT?: StreetSubscriptionWhereInput[] | StreetSubscriptionWhereInput;
}

export interface EducationCreateOneInput {
  create?: EducationCreateInput;
  connect?: EducationWhereUniqueInput;
}

export interface ProvinceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProvinceWhereInput;
  AND?: ProvinceSubscriptionWhereInput[] | ProvinceSubscriptionWhereInput;
  OR?: ProvinceSubscriptionWhereInput[] | ProvinceSubscriptionWhereInput;
  NOT?: ProvinceSubscriptionWhereInput[] | ProvinceSubscriptionWhereInput;
}

export interface EducationCreateInput {
  name: String;
}

export interface PersonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonWhereInput;
  AND?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
  OR?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
  NOT?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
}

export interface CityCreateOneInput {
  create?: CityCreateInput;
  connect?: CityWhereUniqueInput;
}

export interface MajorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MajorWhereInput;
  AND?: MajorSubscriptionWhereInput[] | MajorSubscriptionWhereInput;
  OR?: MajorSubscriptionWhereInput[] | MajorSubscriptionWhereInput;
  NOT?: MajorSubscriptionWhereInput[] | MajorSubscriptionWhereInput;
}

export interface CityCreateInput {
  code: String;
  name: String;
  province: ProvinceCreateOneWithoutCitiesInput;
  areas?: AreaCreateManyWithoutCityInput;
  people?: UserCreateManyWithoutBirthCityInput;
}

export interface VillageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  street?: StreetWhereInput;
  people_every?: UserWhereInput;
  people_some?: UserWhereInput;
  people_none?: UserWhereInput;
  AND?: VillageWhereInput[] | VillageWhereInput;
  OR?: VillageWhereInput[] | VillageWhereInput;
  NOT?: VillageWhereInput[] | VillageWhereInput;
}

export interface MajorCreateOneInput {
  create?: MajorCreateInput;
  connect?: MajorWhereUniqueInput;
}

export interface EducationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EducationWhereInput;
  AND?: EducationSubscriptionWhereInput[] | EducationSubscriptionWhereInput;
  OR?: EducationSubscriptionWhereInput[] | EducationSubscriptionWhereInput;
  NOT?: EducationSubscriptionWhereInput[] | EducationSubscriptionWhereInput;
}

export interface MajorCreateInput {
  name: String;
  category: String;
  education: EducationCreateOneInput;
  code?: String;
}

export interface CitySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CityWhereInput;
  AND?: CitySubscriptionWhereInput[] | CitySubscriptionWhereInput;
  OR?: CitySubscriptionWhereInput[] | CitySubscriptionWhereInput;
  NOT?: CitySubscriptionWhereInput[] | CitySubscriptionWhereInput;
}

export interface FamilyCreateManyWithoutFromInput {
  create?: FamilyCreateWithoutFromInput[] | FamilyCreateWithoutFromInput;
  connect?: FamilyWhereUniqueInput[] | FamilyWhereUniqueInput;
}

export type CityWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  code?: String;
}>;

export interface FamilyCreateWithoutFromInput {
  to: PersonCreateOneWithoutFamiliesInput;
  relationship: String;
  status: String;
}

export interface VillageUpdateInput {
  code?: String;
  name?: String;
  street?: StreetUpdateOneRequiredWithoutVillagesInput;
  people?: UserUpdateManyWithoutBirthVillageInput;
}

export interface PersonCreateOneWithoutFamiliesInput {
  create?: PersonCreateWithoutFamiliesInput;
  connect?: PersonWhereUniqueInput;
}

export type CollegeEntranceExamWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PersonCreateWithoutFamiliesInput {
  name: String;
  user?: UserCreateOneInput;
}

export interface UserUpdateInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceUpdateOneWithoutPeopleInput;
  birthCity?: CityUpdateOneWithoutPeopleInput;
  birthArea?: AreaUpdateOneWithoutPeopleInput;
  birthStreet?: StreetUpdateOneWithoutPeopleInput;
  birthVillage?: VillageUpdateOneWithoutPeopleInput;
  uid?: String;
  token?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  regStatus?: RegStatusUpdateOneWithoutApplicantsInput;
  families?: FamilyUpdateManyWithoutFromInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface CollegeEntranceExamWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  province?: ProvinceWhereInput;
  subject?: SubjectWhereInput;
  culscore?: Float;
  culscore_not?: Float;
  culscore_in?: Float[] | Float;
  culscore_not_in?: Float[] | Float;
  culscore_lt?: Float;
  culscore_lte?: Float;
  culscore_gt?: Float;
  culscore_gte?: Float;
  proscore?: Float;
  proscore_not?: Float;
  proscore_in?: Float[] | Float;
  proscore_not_in?: Float[] | Float;
  proscore_lt?: Float;
  proscore_lte?: Float;
  proscore_gt?: Float;
  proscore_gte?: Float;
  candidatenum?: String;
  candidatenum_not?: String;
  candidatenum_in?: String[] | String;
  candidatenum_not_in?: String[] | String;
  candidatenum_lt?: String;
  candidatenum_lte?: String;
  candidatenum_gt?: String;
  candidatenum_gte?: String;
  candidatenum_contains?: String;
  candidatenum_not_contains?: String;
  candidatenum_starts_with?: String;
  candidatenum_not_starts_with?: String;
  candidatenum_ends_with?: String;
  candidatenum_not_ends_with?: String;
  student?: UserWhereInput;
  AND?: CollegeEntranceExamWhereInput[] | CollegeEntranceExamWhereInput;
  OR?: CollegeEntranceExamWhereInput[] | CollegeEntranceExamWhereInput;
  NOT?: CollegeEntranceExamWhereInput[] | CollegeEntranceExamWhereInput;
}

export interface UserCreateInput {
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceCreateOneWithoutPeopleInput;
  birthCity?: CityCreateOneWithoutPeopleInput;
  birthArea?: AreaCreateOneWithoutPeopleInput;
  birthStreet?: StreetCreateOneWithoutPeopleInput;
  birthVillage?: VillageCreateOneWithoutPeopleInput;
  uid: String;
  token: String;
  posts?: PostCreateManyWithoutAuthorInput;
  regStatus?: RegStatusCreateOneWithoutApplicantsInput;
  families?: FamilyCreateManyWithoutFromInput;
}

export interface AreaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  city?: CityWhereInput;
  towns_every?: StreetWhereInput;
  towns_some?: StreetWhereInput;
  towns_none?: StreetWhereInput;
  people_every?: UserWhereInput;
  people_some?: UserWhereInput;
  people_none?: UserWhereInput;
  AND?: AreaWhereInput[] | AreaWhereInput;
  OR?: AreaWhereInput[] | AreaWhereInput;
  NOT?: AreaWhereInput[] | AreaWhereInput;
}

export interface AreaUpdateInput {
  code?: String;
  name?: String;
  city?: CityUpdateOneRequiredWithoutAreasInput;
  towns?: StreetUpdateManyWithoutAreaInput;
  people?: UserUpdateManyWithoutBirthAreaInput;
}

export interface SubjectUpdateManyMutationInput {
  name?: String;
}

export interface CityUpdateOneRequiredWithoutAreasInput {
  create?: CityCreateWithoutAreasInput;
  update?: CityUpdateWithoutAreasDataInput;
  upsert?: CityUpsertWithoutAreasInput;
  connect?: CityWhereUniqueInput;
}

export type EducationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface CityUpdateWithoutAreasDataInput {
  code?: String;
  name?: String;
  province?: ProvinceUpdateOneRequiredWithoutCitiesInput;
  people?: UserUpdateManyWithoutBirthCityInput;
}

export interface StreetUpdateInput {
  code?: String;
  name?: String;
  Area?: AreaUpdateOneRequiredWithoutTownsInput;
  villages?: VillageUpdateManyWithoutStreetInput;
  people?: UserUpdateManyWithoutBirthStreetInput;
}

export interface ProvinceUpdateOneRequiredWithoutCitiesInput {
  create?: ProvinceCreateWithoutCitiesInput;
  update?: ProvinceUpdateWithoutCitiesDataInput;
  upsert?: ProvinceUpsertWithoutCitiesInput;
  connect?: ProvinceWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutRegStatusInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRegStatusDataInput;
  create: UserCreateWithoutRegStatusInput;
}

export interface ProvinceUpdateWithoutCitiesDataInput {
  code?: String;
  name?: String;
  people?: UserUpdateManyWithoutBirthProvinceInput;
}

export interface UserUpdateWithoutRegStatusDataInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceUpdateOneWithoutPeopleInput;
  birthCity?: CityUpdateOneWithoutPeopleInput;
  birthArea?: AreaUpdateOneWithoutPeopleInput;
  birthStreet?: StreetUpdateOneWithoutPeopleInput;
  birthVillage?: VillageUpdateOneWithoutPeopleInput;
  uid?: String;
  token?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  families?: FamilyUpdateManyWithoutFromInput;
}

export interface UserUpdateManyWithoutBirthProvinceInput {
  create?:
    | UserCreateWithoutBirthProvinceInput[]
    | UserCreateWithoutBirthProvinceInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutBirthProvinceInput[]
    | UserUpdateWithWhereUniqueWithoutBirthProvinceInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutBirthProvinceInput[]
    | UserUpsertWithWhereUniqueWithoutBirthProvinceInput;
}

export interface UserUpdateManyWithoutRegStatusInput {
  create?: UserCreateWithoutRegStatusInput[] | UserCreateWithoutRegStatusInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutRegStatusInput[]
    | UserUpdateWithWhereUniqueWithoutRegStatusInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutRegStatusInput[]
    | UserUpsertWithWhereUniqueWithoutRegStatusInput;
}

export interface UserUpdateWithWhereUniqueWithoutBirthProvinceInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBirthProvinceDataInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  gender?: String;
  gender_not?: String;
  gender_in?: String[] | String;
  gender_not_in?: String[] | String;
  gender_lt?: String;
  gender_lte?: String;
  gender_gt?: String;
  gender_gte?: String;
  gender_contains?: String;
  gender_not_contains?: String;
  gender_starts_with?: String;
  gender_not_starts_with?: String;
  gender_ends_with?: String;
  gender_not_ends_with?: String;
  birthdaycalendar?: String;
  birthdaycalendar_not?: String;
  birthdaycalendar_in?: String[] | String;
  birthdaycalendar_not_in?: String[] | String;
  birthdaycalendar_lt?: String;
  birthdaycalendar_lte?: String;
  birthdaycalendar_gt?: String;
  birthdaycalendar_gte?: String;
  birthdaycalendar_contains?: String;
  birthdaycalendar_not_contains?: String;
  birthdaycalendar_starts_with?: String;
  birthdaycalendar_not_starts_with?: String;
  birthdaycalendar_ends_with?: String;
  birthdaycalendar_not_ends_with?: String;
  birthday?: DateTimeInput;
  birthday_not?: DateTimeInput;
  birthday_in?: DateTimeInput[] | DateTimeInput;
  birthday_not_in?: DateTimeInput[] | DateTimeInput;
  birthday_lt?: DateTimeInput;
  birthday_lte?: DateTimeInput;
  birthday_gt?: DateTimeInput;
  birthday_gte?: DateTimeInput;
  birthProvince?: ProvinceWhereInput;
  birthCity?: CityWhereInput;
  birthArea?: AreaWhereInput;
  birthStreet?: StreetWhereInput;
  birthVillage?: VillageWhereInput;
  uid?: String;
  uid_not?: String;
  uid_in?: String[] | String;
  uid_not_in?: String[] | String;
  uid_lt?: String;
  uid_lte?: String;
  uid_gt?: String;
  uid_gte?: String;
  uid_contains?: String;
  uid_not_contains?: String;
  uid_starts_with?: String;
  uid_not_starts_with?: String;
  uid_ends_with?: String;
  uid_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  regStatus?: RegStatusWhereInput;
  families_every?: FamilyWhereInput;
  families_some?: FamilyWhereInput;
  families_none?: FamilyWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpdateWithoutBirthProvinceDataInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthCity?: CityUpdateOneWithoutPeopleInput;
  birthArea?: AreaUpdateOneWithoutPeopleInput;
  birthStreet?: StreetUpdateOneWithoutPeopleInput;
  birthVillage?: VillageUpdateOneWithoutPeopleInput;
  uid?: String;
  token?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  regStatus?: RegStatusUpdateOneWithoutApplicantsInput;
  families?: FamilyUpdateManyWithoutFromInput;
}

export interface UserCreateWithoutRegStatusInput {
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceCreateOneWithoutPeopleInput;
  birthCity?: CityCreateOneWithoutPeopleInput;
  birthArea?: AreaCreateOneWithoutPeopleInput;
  birthStreet?: StreetCreateOneWithoutPeopleInput;
  birthVillage?: VillageCreateOneWithoutPeopleInput;
  uid: String;
  token: String;
  posts?: PostCreateManyWithoutAuthorInput;
  families?: FamilyCreateManyWithoutFromInput;
}

export interface CityUpdateOneWithoutPeopleInput {
  create?: CityCreateWithoutPeopleInput;
  update?: CityUpdateWithoutPeopleDataInput;
  upsert?: CityUpsertWithoutPeopleInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CityWhereUniqueInput;
}

export type PersonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CityUpdateWithoutPeopleDataInput {
  code?: String;
  name?: String;
  province?: ProvinceUpdateOneRequiredWithoutCitiesInput;
  areas?: AreaUpdateManyWithoutCityInput;
}

export interface RegStatusCreateInput {
  university?: UniversityCreateOneInput;
  major: MajorCreateOneInput;
  applicants?: UserCreateManyWithoutRegStatusInput;
}

export interface AreaUpdateManyWithoutCityInput {
  create?: AreaCreateWithoutCityInput[] | AreaCreateWithoutCityInput;
  delete?: AreaWhereUniqueInput[] | AreaWhereUniqueInput;
  connect?: AreaWhereUniqueInput[] | AreaWhereUniqueInput;
  disconnect?: AreaWhereUniqueInput[] | AreaWhereUniqueInput;
  update?:
    | AreaUpdateWithWhereUniqueWithoutCityInput[]
    | AreaUpdateWithWhereUniqueWithoutCityInput;
  upsert?:
    | AreaUpsertWithWhereUniqueWithoutCityInput[]
    | AreaUpsertWithWhereUniqueWithoutCityInput;
}

export interface ProvinceUpdateInput {
  code?: String;
  name?: String;
  cities?: CityUpdateManyWithoutProvinceInput;
  people?: UserUpdateManyWithoutBirthProvinceInput;
}

export interface AreaUpdateWithWhereUniqueWithoutCityInput {
  where: AreaWhereUniqueInput;
  data: AreaUpdateWithoutCityDataInput;
}

export interface PostUpdateManyMutationInput {
  isPublished?: Boolean;
  title?: String;
  content?: String;
}

export interface AreaUpdateWithoutCityDataInput {
  code?: String;
  name?: String;
  towns?: StreetUpdateManyWithoutAreaInput;
  people?: UserUpdateManyWithoutBirthAreaInput;
}

export interface UserUpdateWithoutPostsDataInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceUpdateOneWithoutPeopleInput;
  birthCity?: CityUpdateOneWithoutPeopleInput;
  birthArea?: AreaUpdateOneWithoutPeopleInput;
  birthStreet?: StreetUpdateOneWithoutPeopleInput;
  birthVillage?: VillageUpdateOneWithoutPeopleInput;
  uid?: String;
  token?: String;
  regStatus?: RegStatusUpdateOneWithoutApplicantsInput;
  families?: FamilyUpdateManyWithoutFromInput;
}

export interface StreetUpdateManyWithoutAreaInput {
  create?: StreetCreateWithoutAreaInput[] | StreetCreateWithoutAreaInput;
  delete?: StreetWhereUniqueInput[] | StreetWhereUniqueInput;
  connect?: StreetWhereUniqueInput[] | StreetWhereUniqueInput;
  disconnect?: StreetWhereUniqueInput[] | StreetWhereUniqueInput;
  update?:
    | StreetUpdateWithWhereUniqueWithoutAreaInput[]
    | StreetUpdateWithWhereUniqueWithoutAreaInput;
  upsert?:
    | StreetUpsertWithWhereUniqueWithoutAreaInput[]
    | StreetUpsertWithWhereUniqueWithoutAreaInput;
}

export interface CityWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  province?: ProvinceWhereInput;
  areas_every?: AreaWhereInput;
  areas_some?: AreaWhereInput;
  areas_none?: AreaWhereInput;
  people_every?: UserWhereInput;
  people_some?: UserWhereInput;
  people_none?: UserWhereInput;
  AND?: CityWhereInput[] | CityWhereInput;
  OR?: CityWhereInput[] | CityWhereInput;
  NOT?: CityWhereInput[] | CityWhereInput;
}

export interface StreetUpdateWithWhereUniqueWithoutAreaInput {
  where: StreetWhereUniqueInput;
  data: StreetUpdateWithoutAreaDataInput;
}

export interface PostUpdateInput {
  isPublished?: Boolean;
  title?: String;
  content?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
}

export interface StreetUpdateWithoutAreaDataInput {
  code?: String;
  name?: String;
  villages?: VillageUpdateManyWithoutStreetInput;
  people?: UserUpdateManyWithoutBirthStreetInput;
}

export type RegStatusWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VillageUpdateManyWithoutStreetInput {
  create?: VillageCreateWithoutStreetInput[] | VillageCreateWithoutStreetInput;
  delete?: VillageWhereUniqueInput[] | VillageWhereUniqueInput;
  connect?: VillageWhereUniqueInput[] | VillageWhereUniqueInput;
  disconnect?: VillageWhereUniqueInput[] | VillageWhereUniqueInput;
  update?:
    | VillageUpdateWithWhereUniqueWithoutStreetInput[]
    | VillageUpdateWithWhereUniqueWithoutStreetInput;
  upsert?:
    | VillageUpsertWithWhereUniqueWithoutStreetInput[]
    | VillageUpsertWithWhereUniqueWithoutStreetInput;
}

export interface PostCreateInput {
  isPublished?: Boolean;
  title: String;
  content: String;
  author: UserCreateOneWithoutPostsInput;
}

export interface VillageUpdateWithWhereUniqueWithoutStreetInput {
  where: VillageWhereUniqueInput;
  data: VillageUpdateWithoutStreetDataInput;
}

export interface FamilyUpsertWithWhereUniqueWithoutToInput {
  where: FamilyWhereUniqueInput;
  update: FamilyUpdateWithoutToDataInput;
  create: FamilyCreateWithoutToInput;
}

export interface VillageUpdateWithoutStreetDataInput {
  code?: String;
  name?: String;
  people?: UserUpdateManyWithoutBirthVillageInput;
}

export interface FamilyUpdateWithoutToDataInput {
  from?: UserUpdateOneRequiredWithoutFamiliesInput;
  relationship?: String;
  status?: String;
}

export interface UserUpdateManyWithoutBirthVillageInput {
  create?:
    | UserCreateWithoutBirthVillageInput[]
    | UserCreateWithoutBirthVillageInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutBirthVillageInput[]
    | UserUpdateWithWhereUniqueWithoutBirthVillageInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutBirthVillageInput[]
    | UserUpsertWithWhereUniqueWithoutBirthVillageInput;
}

export interface FamilyUpdateManyWithoutToInput {
  create?: FamilyCreateWithoutToInput[] | FamilyCreateWithoutToInput;
  delete?: FamilyWhereUniqueInput[] | FamilyWhereUniqueInput;
  connect?: FamilyWhereUniqueInput[] | FamilyWhereUniqueInput;
  disconnect?: FamilyWhereUniqueInput[] | FamilyWhereUniqueInput;
  update?:
    | FamilyUpdateWithWhereUniqueWithoutToInput[]
    | FamilyUpdateWithWhereUniqueWithoutToInput;
  upsert?:
    | FamilyUpsertWithWhereUniqueWithoutToInput[]
    | FamilyUpsertWithWhereUniqueWithoutToInput;
}

export interface EducationUpdateManyMutationInput {
  name?: String;
}

export interface PersonUpdateInput {
  name?: String;
  user?: UserUpdateOneInput;
  families?: FamilyUpdateManyWithoutToInput;
}

export interface UserUpdateWithoutBirthVillageDataInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceUpdateOneWithoutPeopleInput;
  birthCity?: CityUpdateOneWithoutPeopleInput;
  birthArea?: AreaUpdateOneWithoutPeopleInput;
  birthStreet?: StreetUpdateOneWithoutPeopleInput;
  uid?: String;
  token?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  regStatus?: RegStatusUpdateOneWithoutApplicantsInput;
  families?: FamilyUpdateManyWithoutFromInput;
}

export interface FamilyCreateManyWithoutToInput {
  create?: FamilyCreateWithoutToInput[] | FamilyCreateWithoutToInput;
  connect?: FamilyWhereUniqueInput[] | FamilyWhereUniqueInput;
}

export interface ProvinceUpdateOneWithoutPeopleInput {
  create?: ProvinceCreateWithoutPeopleInput;
  update?: ProvinceUpdateWithoutPeopleDataInput;
  upsert?: ProvinceUpsertWithoutPeopleInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProvinceWhereUniqueInput;
}

export type UniversityWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  identifier?: String;
}>;

export interface ProvinceUpdateWithoutPeopleDataInput {
  code?: String;
  name?: String;
  cities?: CityUpdateManyWithoutProvinceInput;
}

export interface MajorUpdateInput {
  name?: String;
  category?: String;
  education?: EducationUpdateOneRequiredInput;
  code?: String;
}

export interface CityUpdateManyWithoutProvinceInput {
  create?: CityCreateWithoutProvinceInput[] | CityCreateWithoutProvinceInput;
  delete?: CityWhereUniqueInput[] | CityWhereUniqueInput;
  connect?: CityWhereUniqueInput[] | CityWhereUniqueInput;
  disconnect?: CityWhereUniqueInput[] | CityWhereUniqueInput;
  update?:
    | CityUpdateWithWhereUniqueWithoutProvinceInput[]
    | CityUpdateWithWhereUniqueWithoutProvinceInput;
  upsert?:
    | CityUpsertWithWhereUniqueWithoutProvinceInput[]
    | CityUpsertWithWhereUniqueWithoutProvinceInput;
}

export interface UserUpsertWithoutFamiliesInput {
  update: UserUpdateWithoutFamiliesDataInput;
  create: UserCreateWithoutFamiliesInput;
}

export interface CityUpdateWithWhereUniqueWithoutProvinceInput {
  where: CityWhereUniqueInput;
  data: CityUpdateWithoutProvinceDataInput;
}

export interface UserUpdateWithoutFamiliesDataInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceUpdateOneWithoutPeopleInput;
  birthCity?: CityUpdateOneWithoutPeopleInput;
  birthArea?: AreaUpdateOneWithoutPeopleInput;
  birthStreet?: StreetUpdateOneWithoutPeopleInput;
  birthVillage?: VillageUpdateOneWithoutPeopleInput;
  uid?: String;
  token?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  regStatus?: RegStatusUpdateOneWithoutApplicantsInput;
}

export interface CityUpdateWithoutProvinceDataInput {
  code?: String;
  name?: String;
  areas?: AreaUpdateManyWithoutCityInput;
  people?: UserUpdateManyWithoutBirthCityInput;
}

export interface FamilyUpdateInput {
  from?: UserUpdateOneRequiredWithoutFamiliesInput;
  to?: PersonUpdateOneRequiredWithoutFamiliesInput;
  relationship?: String;
  status?: String;
}

export interface UserUpdateManyWithoutBirthCityInput {
  create?: UserCreateWithoutBirthCityInput[] | UserCreateWithoutBirthCityInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutBirthCityInput[]
    | UserUpdateWithWhereUniqueWithoutBirthCityInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutBirthCityInput[]
    | UserUpsertWithWhereUniqueWithoutBirthCityInput;
}

export interface UserCreateWithoutFamiliesInput {
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceCreateOneWithoutPeopleInput;
  birthCity?: CityCreateOneWithoutPeopleInput;
  birthArea?: AreaCreateOneWithoutPeopleInput;
  birthStreet?: StreetCreateOneWithoutPeopleInput;
  birthVillage?: VillageCreateOneWithoutPeopleInput;
  uid: String;
  token: String;
  posts?: PostCreateManyWithoutAuthorInput;
  regStatus?: RegStatusCreateOneWithoutApplicantsInput;
}

export interface UserUpdateWithWhereUniqueWithoutBirthCityInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBirthCityDataInput;
}

export interface FamilyCreateInput {
  from: UserCreateOneWithoutFamiliesInput;
  to: PersonCreateOneWithoutFamiliesInput;
  relationship: String;
  status: String;
}

export interface FamilyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  from?: UserWhereInput;
  to?: PersonWhereInput;
  relationship?: String;
  relationship_not?: String;
  relationship_in?: String[] | String;
  relationship_not_in?: String[] | String;
  relationship_lt?: String;
  relationship_lte?: String;
  relationship_gt?: String;
  relationship_gte?: String;
  relationship_contains?: String;
  relationship_not_contains?: String;
  relationship_starts_with?: String;
  relationship_not_starts_with?: String;
  relationship_ends_with?: String;
  relationship_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  AND?: FamilyWhereInput[] | FamilyWhereInput;
  OR?: FamilyWhereInput[] | FamilyWhereInput;
  NOT?: FamilyWhereInput[] | FamilyWhereInput;
}

export interface AreaCreateInput {
  code: String;
  name: String;
  city: CityCreateOneWithoutAreasInput;
  towns?: StreetCreateManyWithoutAreaInput;
  people?: UserCreateManyWithoutBirthAreaInput;
}

export interface EducationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: EducationWhereInput[] | EducationWhereInput;
  OR?: EducationWhereInput[] | EducationWhereInput;
  NOT?: EducationWhereInput[] | EducationWhereInput;
}

export interface CityCreateWithoutAreasInput {
  code: String;
  name: String;
  province: ProvinceCreateOneWithoutCitiesInput;
  people?: UserCreateManyWithoutBirthCityInput;
}

export interface UniversityWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  education?: EducationWhereInput;
  identifier?: String;
  identifier_not?: String;
  identifier_in?: String[] | String;
  identifier_not_in?: String[] | String;
  identifier_lt?: String;
  identifier_lte?: String;
  identifier_gt?: String;
  identifier_gte?: String;
  identifier_contains?: String;
  identifier_not_contains?: String;
  identifier_starts_with?: String;
  identifier_not_starts_with?: String;
  identifier_ends_with?: String;
  identifier_not_ends_with?: String;
  city?: CityWhereInput;
  AND?: UniversityWhereInput[] | UniversityWhereInput;
  OR?: UniversityWhereInput[] | UniversityWhereInput;
  NOT?: UniversityWhereInput[] | UniversityWhereInput;
}

export interface ProvinceCreateWithoutCitiesInput {
  code: String;
  name: String;
  people?: UserCreateManyWithoutBirthProvinceInput;
}

export interface AreaUpsertWithoutPeopleInput {
  update: AreaUpdateWithoutPeopleDataInput;
  create: AreaCreateWithoutPeopleInput;
}

export interface UserCreateWithoutBirthProvinceInput {
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthCity?: CityCreateOneWithoutPeopleInput;
  birthArea?: AreaCreateOneWithoutPeopleInput;
  birthStreet?: StreetCreateOneWithoutPeopleInput;
  birthVillage?: VillageCreateOneWithoutPeopleInput;
  uid: String;
  token: String;
  posts?: PostCreateManyWithoutAuthorInput;
  regStatus?: RegStatusCreateOneWithoutApplicantsInput;
  families?: FamilyCreateManyWithoutFromInput;
}

export interface StreetUpdateOneWithoutPeopleInput {
  create?: StreetCreateWithoutPeopleInput;
  update?: StreetUpdateWithoutPeopleDataInput;
  upsert?: StreetUpsertWithoutPeopleInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: StreetWhereUniqueInput;
}

export interface CityCreateWithoutPeopleInput {
  code: String;
  name: String;
  province: ProvinceCreateOneWithoutCitiesInput;
  areas?: AreaCreateManyWithoutCityInput;
}

export interface StreetUpdateWithoutPeopleDataInput {
  code?: String;
  name?: String;
  Area?: AreaUpdateOneRequiredWithoutTownsInput;
  villages?: VillageUpdateManyWithoutStreetInput;
}

export interface AreaCreateWithoutCityInput {
  code: String;
  name: String;
  towns?: StreetCreateManyWithoutAreaInput;
  people?: UserCreateManyWithoutBirthAreaInput;
}

export interface AreaUpdateOneRequiredWithoutTownsInput {
  create?: AreaCreateWithoutTownsInput;
  update?: AreaUpdateWithoutTownsDataInput;
  upsert?: AreaUpsertWithoutTownsInput;
  connect?: AreaWhereUniqueInput;
}

export interface StreetCreateWithoutAreaInput {
  code: String;
  name: String;
  villages?: VillageCreateManyWithoutStreetInput;
  people?: UserCreateManyWithoutBirthStreetInput;
}

export interface AreaUpdateWithoutTownsDataInput {
  code?: String;
  name?: String;
  city?: CityUpdateOneRequiredWithoutAreasInput;
  people?: UserUpdateManyWithoutBirthAreaInput;
}

export interface VillageCreateWithoutStreetInput {
  code: String;
  name: String;
  people?: UserCreateManyWithoutBirthVillageInput;
}

export interface UserUpdateManyWithoutBirthAreaInput {
  create?: UserCreateWithoutBirthAreaInput[] | UserCreateWithoutBirthAreaInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutBirthAreaInput[]
    | UserUpdateWithWhereUniqueWithoutBirthAreaInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutBirthAreaInput[]
    | UserUpsertWithWhereUniqueWithoutBirthAreaInput;
}

export interface UserCreateWithoutBirthVillageInput {
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceCreateOneWithoutPeopleInput;
  birthCity?: CityCreateOneWithoutPeopleInput;
  birthArea?: AreaCreateOneWithoutPeopleInput;
  birthStreet?: StreetCreateOneWithoutPeopleInput;
  uid: String;
  token: String;
  posts?: PostCreateManyWithoutAuthorInput;
  regStatus?: RegStatusCreateOneWithoutApplicantsInput;
  families?: FamilyCreateManyWithoutFromInput;
}

export interface UserUpdateWithWhereUniqueWithoutBirthAreaInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBirthAreaDataInput;
}

export interface ProvinceCreateWithoutPeopleInput {
  code: String;
  name: String;
  cities?: CityCreateManyWithoutProvinceInput;
}

export interface UserUpdateWithoutBirthAreaDataInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceUpdateOneWithoutPeopleInput;
  birthCity?: CityUpdateOneWithoutPeopleInput;
  birthStreet?: StreetUpdateOneWithoutPeopleInput;
  birthVillage?: VillageUpdateOneWithoutPeopleInput;
  uid?: String;
  token?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  regStatus?: RegStatusUpdateOneWithoutApplicantsInput;
  families?: FamilyUpdateManyWithoutFromInput;
}

export interface CityCreateWithoutProvinceInput {
  code: String;
  name: String;
  areas?: AreaCreateManyWithoutCityInput;
  people?: UserCreateManyWithoutBirthCityInput;
}

export interface VillageUpdateOneWithoutPeopleInput {
  create?: VillageCreateWithoutPeopleInput;
  update?: VillageUpdateWithoutPeopleDataInput;
  upsert?: VillageUpsertWithoutPeopleInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VillageWhereUniqueInput;
}

export interface UserCreateWithoutBirthCityInput {
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceCreateOneWithoutPeopleInput;
  birthArea?: AreaCreateOneWithoutPeopleInput;
  birthStreet?: StreetCreateOneWithoutPeopleInput;
  birthVillage?: VillageCreateOneWithoutPeopleInput;
  uid: String;
  token: String;
  posts?: PostCreateManyWithoutAuthorInput;
  regStatus?: RegStatusCreateOneWithoutApplicantsInput;
  families?: FamilyCreateManyWithoutFromInput;
}

export interface VillageUpdateWithoutPeopleDataInput {
  code?: String;
  name?: String;
  street?: StreetUpdateOneRequiredWithoutVillagesInput;
}

export interface AreaCreateWithoutPeopleInput {
  code: String;
  name: String;
  city: CityCreateOneWithoutAreasInput;
  towns?: StreetCreateManyWithoutAreaInput;
}

export interface StreetUpdateOneRequiredWithoutVillagesInput {
  create?: StreetCreateWithoutVillagesInput;
  update?: StreetUpdateWithoutVillagesDataInput;
  upsert?: StreetUpsertWithoutVillagesInput;
  connect?: StreetWhereUniqueInput;
}

export interface StreetCreateWithoutPeopleInput {
  code: String;
  name: String;
  Area: AreaCreateOneWithoutTownsInput;
  villages?: VillageCreateManyWithoutStreetInput;
}

export interface StreetUpdateWithoutVillagesDataInput {
  code?: String;
  name?: String;
  Area?: AreaUpdateOneRequiredWithoutTownsInput;
  people?: UserUpdateManyWithoutBirthStreetInput;
}

export interface AreaCreateWithoutTownsInput {
  code: String;
  name: String;
  city: CityCreateOneWithoutAreasInput;
  people?: UserCreateManyWithoutBirthAreaInput;
}

export interface UserUpdateManyWithoutBirthStreetInput {
  create?:
    | UserCreateWithoutBirthStreetInput[]
    | UserCreateWithoutBirthStreetInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutBirthStreetInput[]
    | UserUpdateWithWhereUniqueWithoutBirthStreetInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutBirthStreetInput[]
    | UserUpsertWithWhereUniqueWithoutBirthStreetInput;
}

export interface UserCreateWithoutBirthAreaInput {
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceCreateOneWithoutPeopleInput;
  birthCity?: CityCreateOneWithoutPeopleInput;
  birthStreet?: StreetCreateOneWithoutPeopleInput;
  birthVillage?: VillageCreateOneWithoutPeopleInput;
  uid: String;
  token: String;
  posts?: PostCreateManyWithoutAuthorInput;
  regStatus?: RegStatusCreateOneWithoutApplicantsInput;
  families?: FamilyCreateManyWithoutFromInput;
}

export interface UserUpdateWithWhereUniqueWithoutBirthStreetInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBirthStreetDataInput;
}

export interface VillageCreateWithoutPeopleInput {
  code: String;
  name: String;
  street: StreetCreateOneWithoutVillagesInput;
}

export interface UserUpdateWithoutBirthStreetDataInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceUpdateOneWithoutPeopleInput;
  birthCity?: CityUpdateOneWithoutPeopleInput;
  birthArea?: AreaUpdateOneWithoutPeopleInput;
  birthVillage?: VillageUpdateOneWithoutPeopleInput;
  uid?: String;
  token?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  regStatus?: RegStatusUpdateOneWithoutApplicantsInput;
  families?: FamilyUpdateManyWithoutFromInput;
}

export interface StreetCreateWithoutVillagesInput {
  code: String;
  name: String;
  Area: AreaCreateOneWithoutTownsInput;
  people?: UserCreateManyWithoutBirthStreetInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface UserCreateWithoutBirthStreetInput {
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceCreateOneWithoutPeopleInput;
  birthCity?: CityCreateOneWithoutPeopleInput;
  birthArea?: AreaCreateOneWithoutPeopleInput;
  birthVillage?: VillageCreateOneWithoutPeopleInput;
  uid: String;
  token: String;
  posts?: PostCreateManyWithoutAuthorInput;
  regStatus?: RegStatusCreateOneWithoutApplicantsInput;
  families?: FamilyCreateManyWithoutFromInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface VillageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VillageWhereInput;
  AND?: VillageSubscriptionWhereInput[] | VillageSubscriptionWhereInput;
  OR?: VillageSubscriptionWhereInput[] | VillageSubscriptionWhereInput;
  NOT?: VillageSubscriptionWhereInput[] | VillageSubscriptionWhereInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  isPublished?: Boolean;
  title?: String;
  content?: String;
}

export interface SubjectSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SubjectWhereInput;
  AND?: SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput;
  OR?: SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput;
  NOT?: SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface RegStatusUpdateOneWithoutApplicantsInput {
  create?: RegStatusCreateWithoutApplicantsInput;
  update?: RegStatusUpdateWithoutApplicantsDataInput;
  upsert?: RegStatusUpsertWithoutApplicantsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: RegStatusWhereUniqueInput;
}

export interface FamilySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FamilyWhereInput;
  AND?: FamilySubscriptionWhereInput[] | FamilySubscriptionWhereInput;
  OR?: FamilySubscriptionWhereInput[] | FamilySubscriptionWhereInput;
  NOT?: FamilySubscriptionWhereInput[] | FamilySubscriptionWhereInput;
}

export interface RegStatusUpdateWithoutApplicantsDataInput {
  university?: UniversityUpdateOneInput;
  major?: MajorUpdateOneRequiredInput;
}

export interface CollegeEntranceExamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CollegeEntranceExamWhereInput;
  AND?:
    | CollegeEntranceExamSubscriptionWhereInput[]
    | CollegeEntranceExamSubscriptionWhereInput;
  OR?:
    | CollegeEntranceExamSubscriptionWhereInput[]
    | CollegeEntranceExamSubscriptionWhereInput;
  NOT?:
    | CollegeEntranceExamSubscriptionWhereInput[]
    | CollegeEntranceExamSubscriptionWhereInput;
}

export interface UniversityUpdateOneInput {
  create?: UniversityCreateInput;
  update?: UniversityUpdateDataInput;
  upsert?: UniversityUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UniversityWhereUniqueInput;
}

export interface VillageUpdateManyMutationInput {
  code?: String;
  name?: String;
}

export interface UniversityUpdateDataInput {
  name?: String;
  education?: EducationUpdateOneRequiredInput;
  identifier?: String;
  city?: CityUpdateOneRequiredInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  uid?: String;
  token?: String;
}

export interface EducationUpdateOneRequiredInput {
  create?: EducationCreateInput;
  update?: EducationUpdateDataInput;
  upsert?: EducationUpsertNestedInput;
  connect?: EducationWhereUniqueInput;
}

export interface SubjectWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: SubjectWhereInput[] | SubjectWhereInput;
  OR?: SubjectWhereInput[] | SubjectWhereInput;
  NOT?: SubjectWhereInput[] | SubjectWhereInput;
}

export interface EducationUpdateDataInput {
  name?: String;
}

export interface SubjectUpdateInput {
  name?: String;
}

export interface EducationUpsertNestedInput {
  update: EducationUpdateDataInput;
  create: EducationCreateInput;
}

export interface StreetCreateInput {
  code: String;
  name: String;
  Area: AreaCreateOneWithoutTownsInput;
  villages?: VillageCreateManyWithoutStreetInput;
  people?: UserCreateManyWithoutBirthStreetInput;
}

export interface CityUpdateOneRequiredInput {
  create?: CityCreateInput;
  update?: CityUpdateDataInput;
  upsert?: CityUpsertNestedInput;
  connect?: CityWhereUniqueInput;
}

export interface UserUpdateWithWhereUniqueWithoutRegStatusInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRegStatusDataInput;
}

export interface CityUpdateDataInput {
  code?: String;
  name?: String;
  province?: ProvinceUpdateOneRequiredWithoutCitiesInput;
  areas?: AreaUpdateManyWithoutCityInput;
  people?: UserUpdateManyWithoutBirthCityInput;
}

export interface RegStatusUpdateInput {
  university?: UniversityUpdateOneInput;
  major?: MajorUpdateOneRequiredInput;
  applicants?: UserUpdateManyWithoutRegStatusInput;
}

export interface CityUpsertNestedInput {
  update: CityUpdateDataInput;
  create: CityCreateInput;
}

export interface ProvinceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  cities_every?: CityWhereInput;
  cities_some?: CityWhereInput;
  cities_none?: CityWhereInput;
  people_every?: UserWhereInput;
  people_some?: UserWhereInput;
  people_none?: UserWhereInput;
  AND?: ProvinceWhereInput[] | ProvinceWhereInput;
  OR?: ProvinceWhereInput[] | ProvinceWhereInput;
  NOT?: ProvinceWhereInput[] | ProvinceWhereInput;
}

export interface UniversityUpsertNestedInput {
  update: UniversityUpdateDataInput;
  create: UniversityCreateInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MajorUpdateOneRequiredInput {
  create?: MajorCreateInput;
  update?: MajorUpdateDataInput;
  upsert?: MajorUpsertNestedInput;
  connect?: MajorWhereUniqueInput;
}

export type ProvinceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  code?: String;
  name?: String;
}>;

export interface MajorUpdateDataInput {
  name?: String;
  category?: String;
  education?: EducationUpdateOneRequiredInput;
  code?: String;
}

export interface UserCreateWithoutPostsInput {
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceCreateOneWithoutPeopleInput;
  birthCity?: CityCreateOneWithoutPeopleInput;
  birthArea?: AreaCreateOneWithoutPeopleInput;
  birthStreet?: StreetCreateOneWithoutPeopleInput;
  birthVillage?: VillageCreateOneWithoutPeopleInput;
  uid: String;
  token: String;
  regStatus?: RegStatusCreateOneWithoutApplicantsInput;
  families?: FamilyCreateManyWithoutFromInput;
}

export interface MajorUpsertNestedInput {
  update: MajorUpdateDataInput;
  create: MajorCreateInput;
}

export interface PersonUpdateManyMutationInput {
  name?: String;
}

export interface RegStatusUpsertWithoutApplicantsInput {
  update: RegStatusUpdateWithoutApplicantsDataInput;
  create: RegStatusCreateWithoutApplicantsInput;
}

export interface FamilyUpdateWithWhereUniqueWithoutToInput {
  where: FamilyWhereUniqueInput;
  data: FamilyUpdateWithoutToDataInput;
}

export interface FamilyUpdateManyWithoutFromInput {
  create?: FamilyCreateWithoutFromInput[] | FamilyCreateWithoutFromInput;
  delete?: FamilyWhereUniqueInput[] | FamilyWhereUniqueInput;
  connect?: FamilyWhereUniqueInput[] | FamilyWhereUniqueInput;
  disconnect?: FamilyWhereUniqueInput[] | FamilyWhereUniqueInput;
  update?:
    | FamilyUpdateWithWhereUniqueWithoutFromInput[]
    | FamilyUpdateWithWhereUniqueWithoutFromInput;
  upsert?:
    | FamilyUpsertWithWhereUniqueWithoutFromInput[]
    | FamilyUpsertWithWhereUniqueWithoutFromInput;
}

export interface FamilyCreateWithoutToInput {
  from: UserCreateOneWithoutFamiliesInput;
  relationship: String;
  status: String;
}

export interface FamilyUpdateWithWhereUniqueWithoutFromInput {
  where: FamilyWhereUniqueInput;
  data: FamilyUpdateWithoutFromDataInput;
}

export interface MajorUpdateManyMutationInput {
  name?: String;
  category?: String;
  code?: String;
}

export interface FamilyUpdateWithoutFromDataInput {
  to?: PersonUpdateOneRequiredWithoutFamiliesInput;
  relationship?: String;
  status?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  uid?: String;
  token?: String;
}>;

export interface PersonUpdateOneRequiredWithoutFamiliesInput {
  create?: PersonCreateWithoutFamiliesInput;
  update?: PersonUpdateWithoutFamiliesDataInput;
  upsert?: PersonUpsertWithoutFamiliesInput;
  connect?: PersonWhereUniqueInput;
}

export type VillageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  code?: String;
}>;

export interface PersonUpdateWithoutFamiliesDataInput {
  name?: String;
  user?: UserUpdateOneInput;
}

export interface ProvinceCreateOneWithoutCitiesInput {
  create?: ProvinceCreateWithoutCitiesInput;
  connect?: ProvinceWhereUniqueInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface CityCreateOneWithoutPeopleInput {
  create?: CityCreateWithoutPeopleInput;
  connect?: CityWhereUniqueInput;
}

export interface UserUpdateDataInput {
  username?: String;
  password?: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeInput;
  birthProvince?: ProvinceUpdateOneWithoutPeopleInput;
  birthCity?: CityUpdateOneWithoutPeopleInput;
  birthArea?: AreaUpdateOneWithoutPeopleInput;
  birthStreet?: StreetUpdateOneWithoutPeopleInput;
  birthVillage?: VillageUpdateOneWithoutPeopleInput;
  uid?: String;
  token?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  regStatus?: RegStatusUpdateOneWithoutApplicantsInput;
  families?: FamilyUpdateManyWithoutFromInput;
}

export interface StreetCreateManyWithoutAreaInput {
  create?: StreetCreateWithoutAreaInput[] | StreetCreateWithoutAreaInput;
  connect?: StreetWhereUniqueInput[] | StreetWhereUniqueInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserCreateManyWithoutBirthVillageInput {
  create?:
    | UserCreateWithoutBirthVillageInput[]
    | UserCreateWithoutBirthVillageInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface PersonUpsertWithoutFamiliesInput {
  update: PersonUpdateWithoutFamiliesDataInput;
  create: PersonCreateWithoutFamiliesInput;
}

export interface CityCreateManyWithoutProvinceInput {
  create?: CityCreateWithoutProvinceInput[] | CityCreateWithoutProvinceInput;
  connect?: CityWhereUniqueInput[] | CityWhereUniqueInput;
}

export interface FamilyUpsertWithWhereUniqueWithoutFromInput {
  where: FamilyWhereUniqueInput;
  update: FamilyUpdateWithoutFromDataInput;
  create: FamilyCreateWithoutFromInput;
}

export interface AreaCreateOneWithoutPeopleInput {
  create?: AreaCreateWithoutPeopleInput;
  connect?: AreaWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutBirthStreetInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBirthStreetDataInput;
  create: UserCreateWithoutBirthStreetInput;
}

export interface AreaCreateOneWithoutTownsInput {
  create?: AreaCreateWithoutTownsInput;
  connect?: AreaWhereUniqueInput;
}

export interface StreetUpsertWithoutVillagesInput {
  update: StreetUpdateWithoutVillagesDataInput;
  create: StreetCreateWithoutVillagesInput;
}

export interface VillageCreateOneWithoutPeopleInput {
  create?: VillageCreateWithoutPeopleInput;
  connect?: VillageWhereUniqueInput;
}

export interface VillageUpsertWithoutPeopleInput {
  update: VillageUpdateWithoutPeopleDataInput;
  create: VillageCreateWithoutPeopleInput;
}

export interface UserCreateManyWithoutBirthStreetInput {
  create?:
    | UserCreateWithoutBirthStreetInput[]
    | UserCreateWithoutBirthStreetInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutBirthAreaInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBirthAreaDataInput;
  create: UserCreateWithoutBirthAreaInput;
}

export interface RegStatusWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  university?: UniversityWhereInput;
  major?: MajorWhereInput;
  applicants_every?: UserWhereInput;
  applicants_some?: UserWhereInput;
  applicants_none?: UserWhereInput;
  AND?: RegStatusWhereInput[] | RegStatusWhereInput;
  OR?: RegStatusWhereInput[] | RegStatusWhereInput;
  NOT?: RegStatusWhereInput[] | RegStatusWhereInput;
}

export interface AreaUpsertWithoutTownsInput {
  update: AreaUpdateWithoutTownsDataInput;
  create: AreaCreateWithoutTownsInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface StreetUpsertWithoutPeopleInput {
  update: StreetUpdateWithoutPeopleDataInput;
  create: StreetCreateWithoutPeopleInput;
}

export interface AreaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AreaWhereInput;
  AND?: AreaSubscriptionWhereInput[] | AreaSubscriptionWhereInput;
  OR?: AreaSubscriptionWhereInput[] | AreaSubscriptionWhereInput;
  NOT?: AreaSubscriptionWhereInput[] | AreaSubscriptionWhereInput;
}

export interface UserUpsertWithWhereUniqueWithoutBirthCityInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBirthCityDataInput;
  create: UserCreateWithoutBirthCityInput;
}

export interface UniversityUpdateManyMutationInput {
  name?: String;
  identifier?: String;
}

export interface CityUpsertWithWhereUniqueWithoutProvinceInput {
  where: CityWhereUniqueInput;
  update: CityUpdateWithoutProvinceDataInput;
  create: CityCreateWithoutProvinceInput;
}

export interface StreetUpdateManyMutationInput {
  code?: String;
  name?: String;
}

export interface ProvinceUpsertWithoutPeopleInput {
  update: ProvinceUpdateWithoutPeopleDataInput;
  create: ProvinceCreateWithoutPeopleInput;
}

export type MajorWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpsertWithWhereUniqueWithoutBirthVillageInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBirthVillageDataInput;
  create: UserCreateWithoutBirthVillageInput;
}

export interface ProvinceUpdateManyMutationInput {
  code?: String;
  name?: String;
}

export interface VillageUpsertWithWhereUniqueWithoutStreetInput {
  where: VillageWhereUniqueInput;
  update: VillageUpdateWithoutStreetDataInput;
  create: VillageCreateWithoutStreetInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface StreetUpsertWithWhereUniqueWithoutAreaInput {
  where: StreetWhereUniqueInput;
  update: StreetUpdateWithoutAreaDataInput;
  create: StreetCreateWithoutAreaInput;
}

export type StreetWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  code?: String;
}>;

export interface AreaUpsertWithWhereUniqueWithoutCityInput {
  where: AreaWhereUniqueInput;
  update: AreaUpdateWithoutCityDataInput;
  create: AreaCreateWithoutCityInput;
}

export interface PersonCreateInput {
  name: String;
  user?: UserCreateOneInput;
  families?: FamilyCreateManyWithoutToInput;
}

export interface CityUpsertWithoutPeopleInput {
  update: CityUpdateWithoutPeopleDataInput;
  create: CityCreateWithoutPeopleInput;
}

export interface UserUpdateOneRequiredWithoutFamiliesInput {
  create?: UserCreateWithoutFamiliesInput;
  update?: UserUpdateWithoutFamiliesDataInput;
  upsert?: UserUpsertWithoutFamiliesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutBirthProvinceInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBirthProvinceDataInput;
  create: UserCreateWithoutBirthProvinceInput;
}

export interface CityCreateOneWithoutAreasInput {
  create?: CityCreateWithoutAreasInput;
  connect?: CityWhereUniqueInput;
}

export interface ProvinceUpsertWithoutCitiesInput {
  update: ProvinceUpdateWithoutCitiesDataInput;
  create: ProvinceCreateWithoutCitiesInput;
}

export interface AreaCreateManyWithoutCityInput {
  create?: AreaCreateWithoutCityInput[] | AreaCreateWithoutCityInput;
  connect?: AreaWhereUniqueInput[] | AreaWhereUniqueInput;
}

export interface CityUpsertWithoutAreasInput {
  update: CityUpdateWithoutAreasDataInput;
  create: CityCreateWithoutAreasInput;
}

export interface ProvinceCreateOneWithoutPeopleInput {
  create?: ProvinceCreateWithoutPeopleInput;
  connect?: ProvinceWhereUniqueInput;
}

export interface AreaUpdateManyMutationInput {
  code?: String;
  name?: String;
}

export interface StreetCreateOneWithoutPeopleInput {
  create?: StreetCreateWithoutPeopleInput;
  connect?: StreetWhereUniqueInput;
}

export interface EducationUpdateInput {
  name?: String;
}

export interface StreetCreateOneWithoutVillagesInput {
  create?: StreetCreateWithoutVillagesInput;
  connect?: StreetWhereUniqueInput;
}

export interface CollegeEntranceExamUpdateManyMutationInput {
  culscore?: Float;
  proscore?: Float;
  candidatenum?: String;
}

export interface RegStatusSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RegStatusWhereInput;
  AND?: RegStatusSubscriptionWhereInput[] | RegStatusSubscriptionWhereInput;
  OR?: RegStatusSubscriptionWhereInput[] | RegStatusSubscriptionWhereInput;
  NOT?: RegStatusSubscriptionWhereInput[] | RegStatusSubscriptionWhereInput;
}

export interface CityUpdateInput {
  code?: String;
  name?: String;
  province?: ProvinceUpdateOneRequiredWithoutCitiesInput;
  areas?: AreaUpdateManyWithoutCityInput;
  people?: UserUpdateManyWithoutBirthCityInput;
}

export interface VillageCreateInput {
  code: String;
  name: String;
  street: StreetCreateOneWithoutVillagesInput;
  people?: UserCreateManyWithoutBirthVillageInput;
}

export interface CityUpdateManyMutationInput {
  code?: String;
  name?: String;
}

export type FamilyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CollegeEntranceExamCreateInput {
  province: ProvinceCreateOneInput;
  subject: SubjectCreateOneInput;
  culscore: Float;
  proscore?: Float;
  candidatenum: String;
  student: UserCreateOneInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface ProvinceCreateOneInput {
  create?: ProvinceCreateInput;
  connect?: ProvinceWhereUniqueInput;
}

export type SubjectWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProvinceCreateInput {
  code: String;
  name: String;
  cities?: CityCreateManyWithoutProvinceInput;
  people?: UserCreateManyWithoutBirthProvinceInput;
}

export interface UserCreateOneWithoutFamiliesInput {
  create?: UserCreateWithoutFamiliesInput;
  connect?: UserWhereUniqueInput;
}

export interface SubjectCreateOneInput {
  create?: SubjectCreateInput;
  connect?: SubjectWhereUniqueInput;
}

export interface VillageCreateManyWithoutStreetInput {
  create?: VillageCreateWithoutStreetInput[] | VillageCreateWithoutStreetInput;
  connect?: VillageWhereUniqueInput[] | VillageWhereUniqueInput;
}

export interface SubjectCreateInput {
  name: String;
}

export interface UserCreateManyWithoutBirthAreaInput {
  create?: UserCreateWithoutBirthAreaInput[] | UserCreateWithoutBirthAreaInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface CollegeEntranceExamUpdateInput {
  province?: ProvinceUpdateOneRequiredInput;
  subject?: SubjectUpdateOneRequiredInput;
  culscore?: Float;
  proscore?: Float;
  candidatenum?: String;
  student?: UserUpdateOneRequiredInput;
}

export interface StreetWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  Area?: AreaWhereInput;
  villages_every?: VillageWhereInput;
  villages_some?: VillageWhereInput;
  villages_none?: VillageWhereInput;
  people_every?: UserWhereInput;
  people_some?: UserWhereInput;
  people_none?: UserWhereInput;
  AND?: StreetWhereInput[] | StreetWhereInput;
  OR?: StreetWhereInput[] | StreetWhereInput;
  NOT?: StreetWhereInput[] | StreetWhereInput;
}

export interface ProvinceUpdateOneRequiredInput {
  create?: ProvinceCreateInput;
  update?: ProvinceUpdateDataInput;
  upsert?: ProvinceUpsertNestedInput;
  connect?: ProvinceWhereUniqueInput;
}

export interface UserCreateManyWithoutRegStatusInput {
  create?: UserCreateWithoutRegStatusInput[] | UserCreateWithoutRegStatusInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface ProvinceUpdateDataInput {
  code?: String;
  name?: String;
  cities?: CityUpdateManyWithoutProvinceInput;
  people?: UserUpdateManyWithoutBirthProvinceInput;
}

export interface FamilyUpdateManyMutationInput {
  relationship?: String;
  status?: String;
}

export interface SubjectUpsertNestedInput {
  update: SubjectUpdateDataInput;
  create: SubjectCreateInput;
}

export interface SubjectUpdateDataInput {
  name?: String;
}

export interface SubjectUpdateOneRequiredInput {
  create?: SubjectCreateInput;
  update?: SubjectUpdateDataInput;
  upsert?: SubjectUpsertNestedInput;
  connect?: SubjectWhereUniqueInput;
}

export interface ProvinceUpsertNestedInput {
  update: ProvinceUpdateDataInput;
  create: ProvinceCreateInput;
}

export interface UserCreateManyWithoutBirthProvinceInput {
  create?:
    | UserCreateWithoutBirthProvinceInput[]
    | UserCreateWithoutBirthProvinceInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UniversityUpdateInput {
  name?: String;
  education?: EducationUpdateOneRequiredInput;
  identifier?: String;
  city?: CityUpdateOneRequiredInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface UserCreateManyWithoutBirthCityInput {
  create?: UserCreateWithoutBirthCityInput[] | UserCreateWithoutBirthCityInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VillagePreviousValues {
  id: ID_Output;
  code: String;
  name: String;
}

export interface VillagePreviousValuesPromise
  extends Promise<VillagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
}

export interface VillagePreviousValuesSubscription
  extends Promise<AsyncIterator<VillagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeOutput;
  uid: String;
  token: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  gender: () => Promise<String>;
  birthdaycalendar: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  uid: () => Promise<String>;
  token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  birthdaycalendar: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  uid: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UniversityPreviousValues {
  id: ID_Output;
  name: String;
  identifier: String;
}

export interface UniversityPreviousValuesPromise
  extends Promise<UniversityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  identifier: () => Promise<String>;
}

export interface UniversityPreviousValuesSubscription
  extends Promise<AsyncIterator<UniversityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  identifier: () => Promise<AsyncIterator<String>>;
}

export interface Subject {
  id: ID_Output;
  name: String;
}

export interface SubjectPromise extends Promise<Subject>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SubjectSubscription
  extends Promise<AsyncIterator<Subject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCity {
  count: Int;
}

export interface AggregateCityPromise
  extends Promise<AggregateCity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCitySubscription
  extends Promise<AsyncIterator<AggregateCity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CollegeEntranceExam {
  id: ID_Output;
  culscore: Float;
  proscore?: Float;
  candidatenum: String;
}

export interface CollegeEntranceExamPromise
  extends Promise<CollegeEntranceExam>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  province: <T = ProvincePromise>() => T;
  subject: <T = SubjectPromise>() => T;
  culscore: () => Promise<Float>;
  proscore: () => Promise<Float>;
  candidatenum: () => Promise<String>;
  student: <T = UserPromise>() => T;
}

export interface CollegeEntranceExamSubscription
  extends Promise<AsyncIterator<CollegeEntranceExam>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  province: <T = ProvinceSubscription>() => T;
  subject: <T = SubjectSubscription>() => T;
  culscore: () => Promise<AsyncIterator<Float>>;
  proscore: () => Promise<AsyncIterator<Float>>;
  candidatenum: () => Promise<AsyncIterator<String>>;
  student: <T = UserSubscription>() => T;
}

export interface AggregateVillage {
  count: Int;
}

export interface AggregateVillagePromise
  extends Promise<AggregateVillage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVillageSubscription
  extends Promise<AsyncIterator<AggregateVillage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VillageConnection {}

export interface VillageConnectionPromise
  extends Promise<VillageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VillageEdge>>() => T;
  aggregate: <T = AggregateVillagePromise>() => T;
}

export interface VillageConnectionSubscription
  extends Promise<AsyncIterator<VillageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VillageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVillageSubscription>() => T;
}

export interface CityEdge {
  cursor: String;
}

export interface CityEdgePromise extends Promise<CityEdge>, Fragmentable {
  node: <T = CityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CityEdgeSubscription
  extends Promise<AsyncIterator<CityEdge>>,
    Fragmentable {
  node: <T = CitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CityConnection {}

export interface CityConnectionPromise
  extends Promise<CityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CityEdge>>() => T;
  aggregate: <T = AggregateCityPromise>() => T;
}

export interface CityConnectionSubscription
  extends Promise<AsyncIterator<CityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCitySubscription>() => T;
}

export interface AggregateUniversity {
  count: Int;
}

export interface AggregateUniversityPromise
  extends Promise<AggregateUniversity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUniversitySubscription
  extends Promise<AsyncIterator<AggregateUniversity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateArea {
  count: Int;
}

export interface AggregateAreaPromise
  extends Promise<AggregateArea>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAreaSubscription
  extends Promise<AsyncIterator<AggregateArea>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UniversityConnection {}

export interface UniversityConnectionPromise
  extends Promise<UniversityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UniversityEdge>>() => T;
  aggregate: <T = AggregateUniversityPromise>() => T;
}

export interface UniversityConnectionSubscription
  extends Promise<AsyncIterator<UniversityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UniversityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUniversitySubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateSubject {
  count: Int;
}

export interface AggregateSubjectPromise
  extends Promise<AggregateSubject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubjectSubscription
  extends Promise<AsyncIterator<AggregateSubject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AreaSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AreaSubscriptionPayloadPromise
  extends Promise<AreaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AreaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AreaPreviousValuesPromise>() => T;
}

export interface AreaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AreaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AreaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AreaPreviousValuesSubscription>() => T;
}

export interface SubjectConnection {}

export interface SubjectConnectionPromise
  extends Promise<SubjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubjectEdge>>() => T;
  aggregate: <T = AggregateSubjectPromise>() => T;
}

export interface SubjectConnectionSubscription
  extends Promise<AsyncIterator<SubjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubjectSubscription>() => T;
}

export interface AreaPreviousValues {
  id: ID_Output;
  code: String;
  name: String;
}

export interface AreaPreviousValuesPromise
  extends Promise<AreaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
}

export interface AreaPreviousValuesSubscription
  extends Promise<AsyncIterator<AreaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStreet {
  count: Int;
}

export interface AggregateStreetPromise
  extends Promise<AggregateStreet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStreetSubscription
  extends Promise<AsyncIterator<AggregateStreet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AreaEdge {
  cursor: String;
}

export interface AreaEdgePromise extends Promise<AreaEdge>, Fragmentable {
  node: <T = AreaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AreaEdgeSubscription
  extends Promise<AsyncIterator<AreaEdge>>,
    Fragmentable {
  node: <T = AreaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StreetConnection {}

export interface StreetConnectionPromise
  extends Promise<StreetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StreetEdge>>() => T;
  aggregate: <T = AggregateStreetPromise>() => T;
}

export interface StreetConnectionSubscription
  extends Promise<AsyncIterator<StreetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StreetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStreetSubscription>() => T;
}

export interface CitySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CitySubscriptionPayloadPromise
  extends Promise<CitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CityPreviousValuesPromise>() => T;
}

export interface CitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CityPreviousValuesSubscription>() => T;
}

export interface RegStatusEdge {
  cursor: String;
}

export interface RegStatusEdgePromise
  extends Promise<RegStatusEdge>,
    Fragmentable {
  node: <T = RegStatusPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RegStatusEdgeSubscription
  extends Promise<AsyncIterator<RegStatusEdge>>,
    Fragmentable {
  node: <T = RegStatusSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CityPreviousValues {
  id: ID_Output;
  code: String;
  name: String;
}

export interface CityPreviousValuesPromise
  extends Promise<CityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
}

export interface CityPreviousValuesSubscription
  extends Promise<AsyncIterator<CityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Province {
  id: ID_Output;
  code: String;
  name: String;
}

export interface ProvincePromise extends Promise<Province>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  cities: <T = FragmentableArray<City>>(
    args?: {
      where?: CityWhereInput;
      orderBy?: CityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  people: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProvinceSubscription
  extends Promise<AsyncIterator<Province>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  cities: <T = Promise<AsyncIterator<CitySubscription>>>(
    args?: {
      where?: CityWhereInput;
      orderBy?: CityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  people: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProvinceEdge {
  cursor: String;
}

export interface ProvinceEdgePromise
  extends Promise<ProvinceEdge>,
    Fragmentable {
  node: <T = ProvincePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProvinceEdgeSubscription
  extends Promise<AsyncIterator<ProvinceEdge>>,
    Fragmentable {
  node: <T = ProvinceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CollegeEntranceExamSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CollegeEntranceExamSubscriptionPayloadPromise
  extends Promise<CollegeEntranceExamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CollegeEntranceExamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CollegeEntranceExamPreviousValuesPromise>() => T;
}

export interface CollegeEntranceExamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CollegeEntranceExamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CollegeEntranceExamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CollegeEntranceExamPreviousValuesSubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CollegeEntranceExamPreviousValues {
  id: ID_Output;
  culscore: Float;
  proscore?: Float;
  candidatenum: String;
}

export interface CollegeEntranceExamPreviousValuesPromise
  extends Promise<CollegeEntranceExamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  culscore: () => Promise<Float>;
  proscore: () => Promise<Float>;
  candidatenum: () => Promise<String>;
}

export interface CollegeEntranceExamPreviousValuesSubscription
  extends Promise<AsyncIterator<CollegeEntranceExamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  culscore: () => Promise<AsyncIterator<Float>>;
  proscore: () => Promise<AsyncIterator<Float>>;
  candidatenum: () => Promise<AsyncIterator<String>>;
}

export interface PostConnection {}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface AreaConnection {}

export interface AreaConnectionPromise
  extends Promise<AreaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AreaEdge>>() => T;
  aggregate: <T = AggregateAreaPromise>() => T;
}

export interface AreaConnectionSubscription
  extends Promise<AsyncIterator<AreaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AreaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAreaSubscription>() => T;
}

export interface PersonEdge {
  cursor: String;
}

export interface PersonEdgePromise extends Promise<PersonEdge>, Fragmentable {
  node: <T = PersonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonEdgeSubscription
  extends Promise<AsyncIterator<PersonEdge>>,
    Fragmentable {
  node: <T = PersonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EducationSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EducationSubscriptionPayloadPromise
  extends Promise<EducationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EducationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EducationPreviousValuesPromise>() => T;
}

export interface EducationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EducationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EducationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EducationPreviousValuesSubscription>() => T;
}

export interface AggregateMajor {
  count: Int;
}

export interface AggregateMajorPromise
  extends Promise<AggregateMajor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMajorSubscription
  extends Promise<AsyncIterator<AggregateMajor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EducationPreviousValues {
  id: ID_Output;
  name: String;
}

export interface EducationPreviousValuesPromise
  extends Promise<EducationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface EducationPreviousValuesSubscription
  extends Promise<AsyncIterator<EducationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface MajorConnection {}

export interface MajorConnectionPromise
  extends Promise<MajorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MajorEdge>>() => T;
  aggregate: <T = AggregateMajorPromise>() => T;
}

export interface MajorConnectionSubscription
  extends Promise<AsyncIterator<MajorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MajorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMajorSubscription>() => T;
}

export interface Person {
  id: ID_Output;
  name: String;
}

export interface PersonPromise extends Promise<Person>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  user: <T = UserPromise>() => T;
  families: <T = FragmentableArray<Family>>(
    args?: {
      where?: FamilyWhereInput;
      orderBy?: FamilyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PersonSubscription
  extends Promise<AsyncIterator<Person>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  families: <T = Promise<AsyncIterator<FamilySubscription>>>(
    args?: {
      where?: FamilyWhereInput;
      orderBy?: FamilyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface FamilyEdge {
  cursor: String;
}

export interface FamilyEdgePromise extends Promise<FamilyEdge>, Fragmentable {
  node: <T = FamilyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FamilyEdgeSubscription
  extends Promise<AsyncIterator<FamilyEdge>>,
    Fragmentable {
  node: <T = FamilySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FamilySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FamilySubscriptionPayloadPromise
  extends Promise<FamilySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FamilyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FamilyPreviousValuesPromise>() => T;
}

export interface FamilySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FamilySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FamilySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FamilyPreviousValuesSubscription>() => T;
}

export interface AggregateEducation {
  count: Int;
}

export interface AggregateEducationPromise
  extends Promise<AggregateEducation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEducationSubscription
  extends Promise<AsyncIterator<AggregateEducation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FamilyPreviousValues {
  id: ID_Output;
  relationship: String;
  status: String;
}

export interface FamilyPreviousValuesPromise
  extends Promise<FamilyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  relationship: () => Promise<String>;
  status: () => Promise<String>;
}

export interface FamilyPreviousValuesSubscription
  extends Promise<AsyncIterator<FamilyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  relationship: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface EducationConnection {}

export interface EducationConnectionPromise
  extends Promise<EducationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EducationEdge>>() => T;
  aggregate: <T = AggregateEducationPromise>() => T;
}

export interface EducationConnectionSubscription
  extends Promise<AsyncIterator<EducationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EducationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEducationSubscription>() => T;
}

export interface Family {
  id: ID_Output;
  relationship: String;
  status: String;
}

export interface FamilyPromise extends Promise<Family>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = UserPromise>() => T;
  to: <T = PersonPromise>() => T;
  relationship: () => Promise<String>;
  status: () => Promise<String>;
}

export interface FamilySubscription
  extends Promise<AsyncIterator<Family>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: <T = UserSubscription>() => T;
  to: <T = PersonSubscription>() => T;
  relationship: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCollegeEntranceExam {
  count: Int;
}

export interface AggregateCollegeEntranceExamPromise
  extends Promise<AggregateCollegeEntranceExam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCollegeEntranceExamSubscription
  extends Promise<AsyncIterator<AggregateCollegeEntranceExam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MajorSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MajorSubscriptionPayloadPromise
  extends Promise<MajorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MajorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MajorPreviousValuesPromise>() => T;
}

export interface MajorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MajorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MajorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MajorPreviousValuesSubscription>() => T;
}

export interface CollegeEntranceExamConnection {}

export interface CollegeEntranceExamConnectionPromise
  extends Promise<CollegeEntranceExamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CollegeEntranceExamEdge>>() => T;
  aggregate: <T = AggregateCollegeEntranceExamPromise>() => T;
}

export interface CollegeEntranceExamConnectionSubscription
  extends Promise<AsyncIterator<CollegeEntranceExamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<CollegeEntranceExamEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateCollegeEntranceExamSubscription>() => T;
}

export interface MajorPreviousValues {
  id: ID_Output;
  name: String;
  category: String;
  code?: String;
}

export interface MajorPreviousValuesPromise
  extends Promise<MajorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  category: () => Promise<String>;
  code: () => Promise<String>;
}

export interface MajorPreviousValuesSubscription
  extends Promise<AsyncIterator<MajorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
}

export interface VillageEdge {
  cursor: String;
}

export interface VillageEdgePromise extends Promise<VillageEdge>, Fragmentable {
  node: <T = VillagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VillageEdgeSubscription
  extends Promise<AsyncIterator<VillageEdge>>,
    Fragmentable {
  node: <T = VillageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Major {
  id: ID_Output;
  name: String;
  category: String;
  code?: String;
}

export interface MajorPromise extends Promise<Major>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  category: () => Promise<String>;
  education: <T = EducationPromise>() => T;
  code: () => Promise<String>;
}

export interface MajorSubscription
  extends Promise<AsyncIterator<Major>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  education: <T = EducationSubscription>() => T;
  code: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PersonSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PersonSubscriptionPayloadPromise
  extends Promise<PersonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonPreviousValuesPromise>() => T;
}

export interface PersonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonPreviousValuesSubscription>() => T;
}

export interface Area {
  id: ID_Output;
  code: String;
  name: String;
}

export interface AreaPromise extends Promise<Area>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  city: <T = CityPromise>() => T;
  towns: <T = FragmentableArray<Street>>(
    args?: {
      where?: StreetWhereInput;
      orderBy?: StreetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  people: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AreaSubscription
  extends Promise<AsyncIterator<Area>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  city: <T = CitySubscription>() => T;
  towns: <T = Promise<AsyncIterator<StreetSubscription>>>(
    args?: {
      where?: StreetWhereInput;
      orderBy?: StreetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  people: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PersonPreviousValues {
  id: ID_Output;
  name: String;
}

export interface PersonPreviousValuesPromise
  extends Promise<PersonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface PersonPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface City {
  id: ID_Output;
  code: String;
  name: String;
}

export interface CityPromise extends Promise<City>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  province: <T = ProvincePromise>() => T;
  areas: <T = FragmentableArray<Area>>(
    args?: {
      where?: AreaWhereInput;
      orderBy?: AreaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  people: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CitySubscription
  extends Promise<AsyncIterator<City>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  province: <T = ProvinceSubscription>() => T;
  areas: <T = Promise<AsyncIterator<AreaSubscription>>>(
    args?: {
      where?: AreaWhereInput;
      orderBy?: AreaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  people: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Education {
  id: ID_Output;
  name: String;
}

export interface EducationPromise extends Promise<Education>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface EducationSubscription
  extends Promise<AsyncIterator<Education>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRegStatus {
  count: Int;
}

export interface AggregateRegStatusPromise
  extends Promise<AggregateRegStatus>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRegStatusSubscription
  extends Promise<AsyncIterator<AggregateRegStatus>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface AggregateProvince {
  count: Int;
}

export interface AggregateProvincePromise
  extends Promise<AggregateProvince>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProvinceSubscription
  extends Promise<AsyncIterator<AggregateProvince>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface PostEdge {
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface University {
  id: ID_Output;
  name: String;
  identifier: String;
}

export interface UniversityPromise extends Promise<University>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  education: <T = EducationPromise>() => T;
  identifier: () => Promise<String>;
  city: <T = CityPromise>() => T;
}

export interface UniversitySubscription
  extends Promise<AsyncIterator<University>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  education: <T = EducationSubscription>() => T;
  identifier: () => Promise<AsyncIterator<String>>;
  city: <T = CitySubscription>() => T;
}

export interface PersonConnection {}

export interface PersonConnectionPromise
  extends Promise<PersonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonEdge>>() => T;
  aggregate: <T = AggregatePersonPromise>() => T;
}

export interface PersonConnectionSubscription
  extends Promise<AsyncIterator<PersonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonSubscription>() => T;
}

export interface ProvinceSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ProvinceSubscriptionPayloadPromise
  extends Promise<ProvinceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProvincePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProvincePreviousValuesPromise>() => T;
}

export interface ProvinceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProvinceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProvinceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProvincePreviousValuesSubscription>() => T;
}

export interface AggregateFamily {
  count: Int;
}

export interface AggregateFamilyPromise
  extends Promise<AggregateFamily>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFamilySubscription
  extends Promise<AsyncIterator<AggregateFamily>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProvincePreviousValues {
  id: ID_Output;
  code: String;
  name: String;
}

export interface ProvincePreviousValuesPromise
  extends Promise<ProvincePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
}

export interface ProvincePreviousValuesSubscription
  extends Promise<AsyncIterator<ProvincePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface EducationEdge {
  cursor: String;
}

export interface EducationEdgePromise
  extends Promise<EducationEdge>,
    Fragmentable {
  node: <T = EducationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EducationEdgeSubscription
  extends Promise<AsyncIterator<EducationEdge>>,
    Fragmentable {
  node: <T = EducationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RegStatus {
  id: ID_Output;
}

export interface RegStatusPromise extends Promise<RegStatus>, Fragmentable {
  id: () => Promise<ID_Output>;
  university: <T = UniversityPromise>() => T;
  major: <T = MajorPromise>() => T;
  applicants: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface RegStatusSubscription
  extends Promise<AsyncIterator<RegStatus>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  university: <T = UniversitySubscription>() => T;
  major: <T = MajorSubscription>() => T;
  applicants: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CollegeEntranceExamEdge {
  cursor: String;
}

export interface CollegeEntranceExamEdgePromise
  extends Promise<CollegeEntranceExamEdge>,
    Fragmentable {
  node: <T = CollegeEntranceExamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CollegeEntranceExamEdgeSubscription
  extends Promise<AsyncIterator<CollegeEntranceExamEdge>>,
    Fragmentable {
  node: <T = CollegeEntranceExamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RegStatusSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RegStatusSubscriptionPayloadPromise
  extends Promise<RegStatusSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RegStatusPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RegStatusPreviousValuesPromise>() => T;
}

export interface RegStatusSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RegStatusSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RegStatusSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RegStatusPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RegStatusPreviousValues {
  id: ID_Output;
}

export interface RegStatusPreviousValuesPromise
  extends Promise<RegStatusPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface RegStatusPreviousValuesSubscription
  extends Promise<AsyncIterator<RegStatusPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface SubjectEdge {
  cursor: String;
}

export interface SubjectEdgePromise extends Promise<SubjectEdge>, Fragmentable {
  node: <T = SubjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubjectEdgeSubscription
  extends Promise<AsyncIterator<SubjectEdge>>,
    Fragmentable {
  node: <T = SubjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
  title: String;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface RegStatusConnection {}

export interface RegStatusConnectionPromise
  extends Promise<RegStatusConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RegStatusEdge>>() => T;
  aggregate: <T = AggregateRegStatusPromise>() => T;
}

export interface RegStatusConnectionSubscription
  extends Promise<AsyncIterator<RegStatusConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RegStatusEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRegStatusSubscription>() => T;
}

export interface StreetSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface StreetSubscriptionPayloadPromise
  extends Promise<StreetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StreetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StreetPreviousValuesPromise>() => T;
}

export interface StreetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StreetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StreetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StreetPreviousValuesSubscription>() => T;
}

export interface AggregatePerson {
  count: Int;
}

export interface AggregatePersonPromise
  extends Promise<AggregatePerson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonSubscription
  extends Promise<AsyncIterator<AggregatePerson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StreetPreviousValues {
  id: ID_Output;
  code: String;
  name: String;
}

export interface StreetPreviousValuesPromise
  extends Promise<StreetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
}

export interface StreetPreviousValuesSubscription
  extends Promise<AsyncIterator<StreetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface FamilyConnection {}

export interface FamilyConnectionPromise
  extends Promise<FamilyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FamilyEdge>>() => T;
  aggregate: <T = AggregateFamilyPromise>() => T;
}

export interface FamilyConnectionSubscription
  extends Promise<AsyncIterator<FamilyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FamilyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFamilySubscription>() => T;
}

export interface Street {
  id: ID_Output;
  code: String;
  name: String;
}

export interface StreetPromise extends Promise<Street>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  Area: <T = AreaPromise>() => T;
  villages: <T = FragmentableArray<Village>>(
    args?: {
      where?: VillageWhereInput;
      orderBy?: VillageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  people: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface StreetSubscription
  extends Promise<AsyncIterator<Street>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  Area: <T = AreaSubscription>() => T;
  villages: <T = Promise<AsyncIterator<VillageSubscription>>>(
    args?: {
      where?: VillageWhereInput;
      orderBy?: VillageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  people: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface VillageSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface VillageSubscriptionPayloadPromise
  extends Promise<VillageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VillagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VillagePreviousValuesPromise>() => T;
}

export interface VillageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VillageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VillageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VillagePreviousValuesSubscription>() => T;
}

export interface StreetEdge {
  cursor: String;
}

export interface StreetEdgePromise extends Promise<StreetEdge>, Fragmentable {
  node: <T = StreetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StreetEdgeSubscription
  extends Promise<AsyncIterator<StreetEdge>>,
    Fragmentable {
  node: <T = StreetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UniversitySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UniversitySubscriptionPayloadPromise
  extends Promise<UniversitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UniversityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UniversityPreviousValuesPromise>() => T;
}

export interface UniversitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UniversitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UniversitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UniversityPreviousValuesSubscription>() => T;
}

export interface Village {
  id: ID_Output;
  code: String;
  name: String;
}

export interface VillagePromise extends Promise<Village>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  street: <T = StreetPromise>() => T;
  people: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface VillageSubscription
  extends Promise<AsyncIterator<Village>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  street: <T = StreetSubscription>() => T;
  people: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SubjectPreviousValues {
  id: ID_Output;
  name: String;
}

export interface SubjectPreviousValuesPromise
  extends Promise<SubjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SubjectPreviousValuesSubscription
  extends Promise<AsyncIterator<SubjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SubjectSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SubjectSubscriptionPayloadPromise
  extends Promise<SubjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubjectPreviousValuesPromise>() => T;
}

export interface SubjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubjectPreviousValuesSubscription>() => T;
}

export interface ProvinceConnection {}

export interface ProvinceConnectionPromise
  extends Promise<ProvinceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProvinceEdge>>() => T;
  aggregate: <T = AggregateProvincePromise>() => T;
}

export interface ProvinceConnectionSubscription
  extends Promise<AsyncIterator<ProvinceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProvinceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProvinceSubscription>() => T;
}

export interface UniversityEdge {
  cursor: String;
}

export interface UniversityEdgePromise
  extends Promise<UniversityEdge>,
    Fragmentable {
  node: <T = UniversityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UniversityEdgeSubscription
  extends Promise<AsyncIterator<UniversityEdge>>,
    Fragmentable {
  node: <T = UniversitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  name?: String;
  gender?: String;
  birthdaycalendar?: String;
  birthday?: DateTimeOutput;
  uid: String;
  token: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  gender: () => Promise<String>;
  birthdaycalendar: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  birthProvince: <T = ProvincePromise>() => T;
  birthCity: <T = CityPromise>() => T;
  birthArea: <T = AreaPromise>() => T;
  birthStreet: <T = StreetPromise>() => T;
  birthVillage: <T = VillagePromise>() => T;
  uid: () => Promise<String>;
  token: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  regStatus: <T = RegStatusPromise>() => T;
  families: <T = FragmentableArray<Family>>(
    args?: {
      where?: FamilyWhereInput;
      orderBy?: FamilyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  birthdaycalendar: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  birthProvince: <T = ProvinceSubscription>() => T;
  birthCity: <T = CitySubscription>() => T;
  birthArea: <T = AreaSubscription>() => T;
  birthStreet: <T = StreetSubscription>() => T;
  birthVillage: <T = VillageSubscription>() => T;
  uid: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  regStatus: <T = RegStatusSubscription>() => T;
  families: <T = Promise<AsyncIterator<FamilySubscription>>>(
    args?: {
      where?: FamilyWhereInput;
      orderBy?: FamilyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface MajorEdge {
  cursor: String;
}

export interface MajorEdgePromise extends Promise<MajorEdge>, Fragmentable {
  node: <T = MajorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MajorEdgeSubscription
  extends Promise<AsyncIterator<MajorEdge>>,
    Fragmentable {
  node: <T = MajorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Area",
    embedded: false
  },
  {
    name: "City",
    embedded: false
  },
  {
    name: "CollegeEntranceExam",
    embedded: false
  },
  {
    name: "Education",
    embedded: false
  },
  {
    name: "Family",
    embedded: false
  },
  {
    name: "Major",
    embedded: false
  },
  {
    name: "Person",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Province",
    embedded: false
  },
  {
    name: "RegStatus",
    embedded: false
  },
  {
    name: "Street",
    embedded: false
  },
  {
    name: "Subject",
    embedded: false
  },
  {
    name: "University",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Village",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
